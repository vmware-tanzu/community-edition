#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")
#@ load("@ytt:overlay", "overlay")
#@ load("/libs/constants.lib.yaml", "pinniped_supervisor_namespace", "pinniped_upstream_idp_secret_name", "pinniped_idp_name")

#@ def additionalScopes():
#@   if data.values.pinniped.upstream_oidc_additional_scopes != []:
#@     return data.values.pinniped.upstream_oidc_additional_scopes
#@   else:
#@     return []
#@   end
#@ end

#@ def claims():
#@   if data.values.pinniped.upstream_oidc_claims != []:
#@     return data.values.pinniped.upstream_oidc_claims
#@   else:
#@     return []
#@   end
#@ end

#@ if data.values.tkg_cluster_role != "workload":
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ pinniped_upstream_idp_secret_name()
  namespace: #@ pinniped_supervisor_namespace()
type: secrets.pinniped.dev/oidc-client
stringData:
  clientID: #@ data.values.pinniped.upstream_oidc_client_id
  clientSecret: #@ data.values.pinniped.upstream_oidc_client_secret
---
apiVersion: idp.supervisor.pinniped.dev/v1alpha1
kind: OIDCIdentityProvider
metadata:
  name: #@ pinniped_idp_name()
  namespace: #@ pinniped_supervisor_namespace()
  annotations:
    kapp.k14s.io/update-strategy: always-replace
spec:
  issuer: #@ data.values.pinniped.upstream_oidc_issuer_url
  authorizationConfig:
    additionalScopes: #@ additionalScopes()
  claims: #@ claims()
  client:
    secretName: #@ pinniped_upstream_idp_secret_name()
  #@ if/end data.values.pinniped.upstream_oidc_tls_ca_data:
  tls:
    certificateAuthorityData:  #@ data.values.pinniped.upstream_oidc_tls_ca_data
#@ end
