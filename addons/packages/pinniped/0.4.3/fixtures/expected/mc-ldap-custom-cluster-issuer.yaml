apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: dex-selfsigned-ca-issuer
  namespace: tanzu-system-auth
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: dex-ca
  namespace: tanzu-system-auth
spec:
  secretName: dex-ca-key-pair
  duration: 87600h
  renewBefore: 360h
  organization:
  - vmware
  commonName: tkg-dex
  isCA: true
  keySize: 2048
  keyAlgorithm: rsa
  keyEncoding: pkcs1
  usages:
  - server auth
  - client auth
  dnsNames:
  - dexca
  ipAddresses: []
  issuerRef:
    name: muggles
    kind: ClusterIssuer
    group: cert-manager.io
---
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: dex-ca-issuer
  namespace: tanzu-system-auth
spec:
  ca:
    secretName: dex-ca-key-pair
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: dex-cert
  namespace: tanzu-system-auth
spec:
  secretName: dex-cert-tls
  duration: 2160h
  renewBefore: 360h
  organization:
  - vmware
  commonName: tkg-dex
  isCA: false
  keySize: 2048
  keyAlgorithm: rsa
  keyEncoding: pkcs1
  usages:
  - server auth
  - client auth
  dnsNames:
  - tkg-dex.com
  ipAddresses:
  - 0.0.0.0
  issuerRef:
    name: dex-ca-issuer
    kind: Issuer
    group: cert-manager.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dex
  namespace: tanzu-system-auth
data:
  config.yaml: |
    issuer: https://0.0.0.0:30167
    frontend:
      theme: tkg
    web:
      https: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/tls.crt
      tlsKey: /etc/dex/tls/tls.key
    expiry:
      signingKeys: 90m
      idTokens: 5m
    logger:
      level: info
      format: json
    staticClients:
    - id: pinniped
      redirectURIs:
      - https://0.0.0.0/callback
      name: pinniped
      secret: dummyvalue
    connectors:
    - type: ldap
      id: ldap
      name: LDAP
      config:
        host: some-ldap-idp.com
        insecureSkipVerify: false
        bindDN: CN=marshmallow,CN=Users,DC=what,DC=ever
        bindPW: $BIND_PW_ENV_VAR
        usernamePrompt: LDAP Username
        userSearch:
          baseDN: CN=Users,DC=what,DC=ever
          filter: (objectClass=person)
          username: cn
          idAttr: dn
          emailAttr: mail
          nameAttr: dc
          scope: sub
        groupSearch:
          baseDN: CN=groups,DC=what,DC=ever
          filter: (objectClass=group)
          userMatchers:
          - userAttr: dn
            groupAttr: member
          nameAttr: cn
          scope: sub
    oauth2:
      skipApprovalScreen: true
      responseTypes:
      - code
    storage:
      type: kubernetes
      config:
        inCluster: true
    enablePasswordDB: false
---
apiVersion: v1
kind: Namespace
metadata:
  name: tanzu-system-auth
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dex
  namespace: tanzu-system-auth
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dex
  name: dex
  namespace: tanzu-system-auth
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dex
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: dex
        revision: "1"
    spec:
      containers:
      - image: projects.registry.vmware.com/tce/dex:v2.27.0_vmware.1
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/dex
        - serve
        - /etc/dex/cfg/config.yaml
        name: dex
        ports:
        - containerPort: 5556
          name: https
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/dex/cfg
          name: config
        - name: tls
          mountPath: /etc/dex/tls
        env:
        - name: KUBERNETES_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: BIND_PW_ENV_VAR
          valueFrom:
            secretKeyRef:
              key: bindPWEnvVar
              name: ldap-bindpw
      dnsPolicy: ClusterFirst
      serviceAccountName: dex
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: config.yaml
            path: config.yaml
          name: dex
        name: config
      - name: tls
        secret:
          secretName: dex-cert-tls
      - name: theme
        emptyDir: {}
      - name: ldap-bindpw
        secret:
          secretName: ldap-bindpw
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: dex
  namespace: tanzu-system-auth
rules:
- apiGroups:
  - dex.coreos.com
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: dex
  namespace: tanzu-system-auth
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
- kind: ServiceAccount
  name: dex
  namespace: tanzu-system-auth
---
apiVersion: v1
kind: Secret
metadata:
  name: ldap-bindpw
  namespace: tanzu-system-auth
type: Opaque
data:
  bindPWEnvVar: emVsZGE=
---
kind: Service
apiVersion: v1
metadata:
  name: dexsvc
  namespace: tanzu-system-auth
  labels:
    app: dex
spec:
  type: NodePort
  ports:
  - name: dex
    protocol: TCP
    port: 5556
    targetPort: https
    nodePort: 30167
  selector:
    app: dex
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pinniped-kapp-config
  labels:
    kapp.k14s.io/config: ""
data:
  config.yml: |
    apiVersion: kapp.k14s.io/v1alpha1
    kind: Config
    rebaseRules:
    - paths:
      - [spec, issuer]
      - [spec, tls]
      type: copy
      sources: [existing, new]
      resourceMatchers:
      - andMatcher:
          matchers:
          - apiVersionKindMatcher: {apiVersion: idp.supervisor.pinniped.dev/v1alpha1, kind: OIDCIdentityProvider}
          - hasNamespaceMatcher:
              names: [pinniped-supervisor]
    - path: [spec, issuer]
      type: copy
      sources: [existing, new]
      resourceMatchers:
      - andMatcher:
          matchers:
          - apiVersionKindMatcher: {apiVersion: config.supervisor.pinniped.dev/v1alpha1, kind: FederationDomain}
          - hasNamespaceMatcher:
              names: [pinniped-supervisor]
    - paths:
      - [spec, audience]
      - [spec, claims]
      - [spec, issuer]
      - [spec, tls]
      type: copy
      sources: [existing, new]
      resourceMatchers:
      - andMatcher:
          matchers:
          - apiVersionKindMatcher: {apiVersion: authentication.concierge.pinniped.dev/v1alpha1, kind: JWTAuthenticator}
          - hasNamespaceMatcher:
              names: [pinniped-concierge]
    - path: [data]
      type: copy
      sources: [existing, new]
      resourceMatchers:
      - kindNamespaceNameMatcher: {kind: ConfigMap, namespace: tanzu-system-auth, name: dex}
    - path: [spec]
      type: copy
      sources: [existing, new]
      resourceMatchers:
      - kindNamespaceNameMatcher: {kind: Certificate, namespace: pinniped-supervisor, name: pinniped-cert}
    - path: [spec]
      type: copy
      sources: [existing, new]
      resourceMatchers:
      - kindNamespaceNameMatcher: {kind: Certificate, namespace: tanzu-system-auth, name: dex-cert}
    - path: [data]
      type: copy
      sources: [existing, new]
      resourceMatchers:
      - kindNamespaceNameMatcher: {kind: Secret, namespace: pinniped-supervisor, name: upstream-idp-client-credentials}
---
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: pinniped-selfsigned-ca-issuer
  namespace: pinniped-supervisor
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: pinniped-ca
  namespace: pinniped-supervisor
spec:
  secretName: pinniped-ca-key-pair
  duration: 87600h
  renewBefore: 360h
  organization:
  - vmware
  commonName: tkg-pinniped
  isCA: true
  keySize: 2048
  keyAlgorithm: rsa
  keyEncoding: pkcs1
  usages:
  - server auth
  - client auth
  dnsNames:
  - pinnipedca
  ipAddresses: []
  issuerRef:
    name: muggles
    kind: ClusterIssuer
    group: cert-manager.io
---
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: pinniped-ca-issuer
  namespace: pinniped-supervisor
spec:
  ca:
    secretName: pinniped-ca-key-pair
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: pinniped-cert
  namespace: pinniped-supervisor
spec:
  secretName: pinniped-supervisor-default-tls-certificate
  duration: 2160h
  renewBefore: 360h
  organization:
  - vmware
  commonName: tkg-pinniped
  isCA: false
  keySize: 2048
  keyAlgorithm: rsa
  keyEncoding: pkcs1
  usages:
  - server auth
  - client auth
  dnsNames: []
  ipAddresses:
  - 0.0.0.0
  issuerRef:
    name: pinniped-ca-issuer
    kind: Issuer
    group: cert-manager.io
---
apiVersion: config.supervisor.pinniped.dev/v1alpha1
kind: FederationDomain
metadata:
  name: pinniped-federation-domain
  namespace: pinniped-supervisor
spec:
  issuer: https://0.0.0.0:31234
---
apiVersion: v1
kind: Secret
metadata:
  name: upstream-idp-client-credentials
  namespace: pinniped-supervisor
type: secrets.pinniped.dev/oidc-client
stringData:
  clientID: ""
  clientSecret: ""
---
apiVersion: idp.supervisor.pinniped.dev/v1alpha1
kind: OIDCIdentityProvider
metadata:
  name: upstream-oidc-identity-provider
  namespace: pinniped-supervisor
  annotations:
    kapp.k14s.io/update-strategy: always-replace
spec:
  issuer: https://0.0.0.0:30167
  authorizationConfig:
    additionalScopes:
    - email
    - profile
    - groups
  claims:
    username: name
    groups: groups
  client:
    secretName: upstream-idp-client-credentials
  tls:
    certificateAuthorityData: ca_bundle_data_of_dex_svc
---
apiVersion: authentication.concierge.pinniped.dev/v1alpha1
kind: JWTAuthenticator
metadata:
  name: tkg-jwt-authenticator
  namespace: pinniped-concierge
spec:
  audience: https://0.0.0.0:31234
  issuer: https://0.0.0.0:31234
  tls:
    certificateAuthorityData: ca_bundle_data_of_supervisor_svc
---
apiVersion: v1
kind: Service
metadata:
  name: pinniped-supervisor
  namespace: pinniped-supervisor
spec:
  type: NodePort
  selector:
    app: pinniped-supervisor
  ports:
  - name: https
    protocol: TCP
    port: 443
    targetPort: 8443
    nodePort: 31234
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
  creationTimestamp: null
  name: federationdomains.config.supervisor.pinniped.dev
spec:
  group: config.supervisor.pinniped.dev
  names:
    categories:
    - pinniped
    kind: FederationDomain
    listKind: FederationDomainList
    plural: federationdomains
    singular: federationdomain
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: FederationDomain describes the configuration of an OIDC provider.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec of the OIDC provider.
            properties:
              issuer:
                description: "Issuer is the OIDC Provider's issuer, per the OIDC Discovery Metadata document, as well as the identifier that it will use for the iss claim in issued JWTs. This field will also be used as the base URL for any endpoints used by the OIDC Provider (e.g., if your issuer is https://example.com/foo, then your authorization endpoint will look like https://example.com/foo/some/path/to/auth/endpoint). \n See https://openid.net/specs/openid-connect-discovery-1_0.html#rfc.section.3 for more information."
                minLength: 1
                type: string
              tls:
                description: TLS configures how this FederationDomain is served over Transport Layer Security (TLS).
                properties:
                  secretName:
                    description: "SecretName is an optional name of a Secret in the same namespace, of type `kubernetes.io/tls`, which contains the TLS serving certificate for the HTTPS endpoints served by this FederationDomain. When provided, the TLS Secret named here must contain keys named `tls.crt` and `tls.key` that contain the certificate and private key to use for TLS. \n Server Name Indication (SNI) is an extension to the Transport Layer Security (TLS) supported by all major browsers. \n SecretName is required if you would like to use different TLS certificates for issuers of different hostnames. SNI requests do not include port numbers, so all issuers with the same DNS hostname must use the same SecretName value even if they have different port numbers. \n SecretName is not required when you would like to use only the HTTP endpoints (e.g. when terminating TLS at an Ingress). It is also not required when you would like all requests to this OIDC Provider's HTTPS endpoints to use the default TLS certificate, which is configured elsewhere. \n When your Issuer URL's host is an IP address, then this field is ignored. SNI does not work for IP addresses."
                    type: string
                type: object
            required:
            - issuer
            type: object
          status:
            description: Status of the OIDC provider.
            properties:
              lastUpdateTime:
                description: LastUpdateTime holds the time at which the Status was last updated. It is a pointer to get around some undesirable behavior with respect to the empty metav1.Time value (see https://github.com/kubernetes/kubernetes/issues/86811).
                format: date-time
                type: string
              message:
                description: Message provides human-readable details about the Status.
                type: string
              secrets:
                description: Secrets contains information about this OIDC Provider's secrets.
                properties:
                  jwks:
                    description: JWKS holds the name of the corev1.Secret in which this OIDC Provider's signing/verification keys are stored. If it is empty, then the signing/verification keys are either unknown or they don't exist.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  stateEncryptionKey:
                    description: StateSigningKey holds the name of the corev1.Secret in which this OIDC Provider's key for encrypting state parameters is stored.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  stateSigningKey:
                    description: StateSigningKey holds the name of the corev1.Secret in which this OIDC Provider's key for signing state parameters is stored.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  tokenSigningKey:
                    description: TokenSigningKey holds the name of the corev1.Secret in which this OIDC Provider's key for signing tokens is stored.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                type: object
              status:
                description: Status holds an enum that describes the state of this OIDC Provider. Note that this Status can represent success or failure.
                enum:
                - Success
                - Duplicate
                - Invalid
                - SameIssuerHostMustUseSameSecret
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
---
apiVersion: v1
kind: Namespace
metadata:
  name: pinniped-supervisor
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pinniped-supervisor
  namespace: pinniped-supervisor
  labels:
    app: pinniped-supervisor
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pinniped-supervisor-static-config
  namespace: pinniped-supervisor
  labels:
    app: pinniped-supervisor
data:
  pinniped.yaml: |
    names:
      defaultTLSCertificateSecret: pinniped-supervisor-default-tls-certificate
    labels: {"app":"pinniped-supervisor"}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pinniped-supervisor
  namespace: pinniped-supervisor
  labels:
    app: pinniped-supervisor
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pinniped-supervisor
  template:
    metadata:
      labels:
        app: pinniped-supervisor
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
      serviceAccountName: pinniped-supervisor
      containers:
      - name: pinniped-supervisor
        image: docker.io/getpinniped/pinniped-server:v0.4.3
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/pinniped-supervisor
        args:
        - /etc/podinfo
        - /etc/config/pinniped.yaml
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
        - name: podinfo
          mountPath: /etc/podinfo
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8443
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 2
          timeoutSeconds: 15
          periodSeconds: 10
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 2
          timeoutSeconds: 3
          periodSeconds: 10
          failureThreshold: 3
        env: []
      volumes:
      - name: config-volume
        configMap:
          name: pinniped-supervisor-static-config
      - name: podinfo
        downwardAPI:
          items:
          - path: labels
            fieldRef:
              fieldPath: metadata.labels
          - path: namespace
            fieldRef:
              fieldPath: metadata.namespace
          - path: name
            fieldRef:
              fieldPath: metadata.name
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: pinniped-supervisor
              topologyKey: kubernetes.io/hostname
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
  creationTimestamp: null
  name: oidcidentityproviders.idp.supervisor.pinniped.dev
  labels:
    app: pinniped-supervisor
spec:
  group: idp.supervisor.pinniped.dev
  names:
    categories:
    - pinniped
    - pinniped-idp
    - pinniped-idps
    kind: OIDCIdentityProvider
    listKind: OIDCIdentityProviderList
    plural: oidcidentityproviders
    singular: oidcidentityprovider
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.issuer
      name: Issuer
      type: string
    - jsonPath: .status.phase
      name: Status
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: OIDCIdentityProvider describes the configuration of an upstream OpenID Connect identity provider.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec for configuring the identity provider.
            properties:
              authorizationConfig:
                description: AuthorizationConfig holds information about how to form the OAuth2 authorization request parameters to be used with this OIDC identity provider.
                properties:
                  additionalScopes:
                    description: AdditionalScopes are the scopes in addition to "openid" that will be requested as part of the authorization request flow with an OIDC identity provider. By default only the "openid" scope will be requested.
                    items:
                      type: string
                    type: array
                type: object
              claims:
                description: Claims provides the names of token claims that will be used when inspecting an identity from this OIDC identity provider.
                properties:
                  groups:
                    description: Groups provides the name of the token claim that will be used to ascertain the groups to which an identity belongs.
                    type: string
                  username:
                    description: Username provides the name of the token claim that will be used to ascertain an identity's username.
                    type: string
                type: object
              client:
                description: OIDCClient contains OIDC client information to be used used with this OIDC identity provider.
                properties:
                  secretName:
                    description: SecretName contains the name of a namespace-local Secret object that provides the clientID and clientSecret for an OIDC client. If only the SecretName is specified in an OIDCClient struct, then it is expected that the Secret is of type "secrets.pinniped.dev/oidc-client" with keys "clientID" and "clientSecret".
                    type: string
                required:
                - secretName
                type: object
              issuer:
                description: Issuer is the issuer URL of this OIDC identity provider, i.e., where to fetch /.well-known/openid-configuration.
                minLength: 1
                pattern: ^https://
                type: string
              tls:
                description: TLS configuration for discovery/JWKS requests to the issuer.
                properties:
                  certificateAuthorityData:
                    description: X.509 Certificate Authority (base64-encoded PEM bundle). If omitted, a default set of system roots will be trusted.
                    type: string
                type: object
            required:
            - client
            - issuer
            type: object
          status:
            description: Status of the identity provider.
            properties:
              conditions:
                description: Represents the observations of an identity provider's current state.
                items:
                  description: Condition status of a resource (mirrored from the metav1.Condition type added in Kubernetes 1.19). In a future API version we can switch to using the upstream type. See https://github.com/kubernetes/apimachinery/blob/v0.19.0/pkg/apis/meta/v1/types.go#L1353-L1413.
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
              phase:
                default: Pending
                description: Phase summarizes the overall status of the OIDCIdentityProvider.
                enum:
                - Pending
                - Ready
                - Error
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pinniped-supervisor
  namespace: pinniped-supervisor
  labels:
    app: pinniped-supervisor
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
  - delete
- apiGroups:
  - config.supervisor.pinniped.dev
  resources:
  - federationdomains
  verbs:
  - update
  - get
  - list
  - watch
- apiGroups:
  - idp.supervisor.pinniped.dev
  resources:
  - oidcidentityproviders
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - idp.supervisor.pinniped.dev
  resources:
  - oidcidentityproviders/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
- apiGroups:
  - apps
  resources:
  - replicasets
  - deployments
  verbs:
  - get
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pinniped-supervisor
  namespace: pinniped-supervisor
  labels:
    app: pinniped-supervisor
subjects:
- kind: ServiceAccount
  name: pinniped-supervisor
  namespace: pinniped-supervisor
roleRef:
  kind: Role
  name: pinniped-supervisor
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
  creationTimestamp: null
  name: jwtauthenticators.authentication.concierge.pinniped.dev
  labels:
    app: pinniped-concierge
spec:
  group: authentication.concierge.pinniped.dev
  names:
    categories:
    - pinniped
    - pinniped-authenticator
    - pinniped-authenticators
    kind: JWTAuthenticator
    listKind: JWTAuthenticatorList
    plural: jwtauthenticators
    singular: jwtauthenticator
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.issuer
      name: Issuer
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: "JWTAuthenticator describes the configuration of a JWT authenticator. \n Upon receiving a signed JWT, a JWTAuthenticator will performs some validation on it (e.g., valid signature, existence of claims, etc.) and extract the username and groups from the token."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec for configuring the authenticator.
            properties:
              audience:
                description: Audience is the required value of the "aud" JWT claim.
                minLength: 1
                type: string
              claims:
                description: Claims allows customization of the claims that will be mapped to user identity for Kubernetes access.
                properties:
                  groups:
                    description: Groups is the name of the claim which should be read to extract the user's group membership from the JWT token. When not specified, it will default to "groups".
                    type: string
                  username:
                    description: Username is the name of the claim which should be read to extract the username from the JWT token. When not specified, it will default to "username".
                    type: string
                type: object
              issuer:
                description: Issuer is the OIDC issuer URL that will be used to discover public signing keys. Issuer is also used to validate the "iss" JWT claim.
                minLength: 1
                pattern: ^https://
                type: string
              tls:
                description: TLS configuration for communicating with the OIDC provider.
                properties:
                  certificateAuthorityData:
                    description: X.509 Certificate Authority (base64-encoded PEM bundle). If omitted, a default set of system roots will be trusted.
                    type: string
                type: object
            required:
            - audience
            - issuer
            type: object
          status:
            description: Status of the authenticator.
            properties:
              conditions:
                description: Represents the observations of the authenticator's current state.
                items:
                  description: Condition status of a resource (mirrored from the metav1.Condition type added in Kubernetes 1.19). In a future API version we can switch to using the upstream type. See https://github.com/kubernetes/apimachinery/blob/v0.19.0/pkg/apis/meta/v1/types.go#L1353-L1413.
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
  creationTimestamp: null
  name: webhookauthenticators.authentication.concierge.pinniped.dev
  labels:
    app: pinniped-concierge
spec:
  group: authentication.concierge.pinniped.dev
  names:
    categories:
    - pinniped
    - pinniped-authenticator
    - pinniped-authenticators
    kind: WebhookAuthenticator
    listKind: WebhookAuthenticatorList
    plural: webhookauthenticators
    singular: webhookauthenticator
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.endpoint
      name: Endpoint
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: WebhookAuthenticator describes the configuration of a webhook authenticator.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec for configuring the authenticator.
            properties:
              endpoint:
                description: Webhook server endpoint URL.
                minLength: 1
                pattern: ^https://
                type: string
              tls:
                description: TLS configuration.
                properties:
                  certificateAuthorityData:
                    description: X.509 Certificate Authority (base64-encoded PEM bundle). If omitted, a default set of system roots will be trusted.
                    type: string
                type: object
            required:
            - endpoint
            type: object
          status:
            description: Status of the authenticator.
            properties:
              conditions:
                description: Represents the observations of the authenticator's current state.
                items:
                  description: Condition status of a resource (mirrored from the metav1.Condition type added in Kubernetes 1.19). In a future API version we can switch to using the upstream type. See https://github.com/kubernetes/apimachinery/blob/v0.19.0/pkg/apis/meta/v1/types.go#L1353-L1413.
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
  creationTimestamp: null
  name: credentialissuers.config.concierge.pinniped.dev
  labels:
    app: pinniped-concierge
spec:
  group: config.concierge.pinniped.dev
  names:
    categories:
    - pinniped
    kind: CredentialIssuer
    listKind: CredentialIssuerList
    plural: credentialissuers
    singular: credentialissuer
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Describes the configuration status of a Pinniped credential issuer.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          status:
            description: Status of the credential issuer.
            properties:
              kubeConfigInfo:
                description: Information needed to form a valid Pinniped-based kubeconfig using this credential issuer.
                properties:
                  certificateAuthorityData:
                    description: The K8s API server CA bundle.
                    minLength: 1
                    type: string
                  server:
                    description: The K8s API server URL.
                    minLength: 1
                    pattern: ^https://|^http://
                    type: string
                required:
                - certificateAuthorityData
                - server
                type: object
              strategies:
                description: List of integration strategies that were attempted by Pinniped.
                items:
                  description: Status of an integration strategy that was attempted by Pinniped.
                  properties:
                    lastUpdateTime:
                      description: When the status was last checked.
                      format: date-time
                      type: string
                    message:
                      description: Human-readable description of the current status.
                      minLength: 1
                      type: string
                    reason:
                      description: Reason for the current status.
                      enum:
                      - FetchedKey
                      - CouldNotFetchKey
                      type: string
                    status:
                      description: Status of the attempted integration strategy.
                      enum:
                      - Success
                      - Error
                      type: string
                    type:
                      description: Type of integration attempted.
                      enum:
                      - KubeClusterSigningCertificate
                      type: string
                  required:
                  - lastUpdateTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            required:
            - strategies
            type: object
        required:
        - status
        type: object
    served: true
    storage: true
---
apiVersion: v1
kind: Namespace
metadata:
  name: pinniped-concierge
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pinniped-concierge
  namespace: pinniped-concierge
  labels:
    app: pinniped-concierge
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pinniped-concierge-config
  namespace: pinniped-concierge
  labels:
    app: pinniped-concierge
data:
  pinniped.yaml: |
    discovery:
      url: null
    api:
      servingCertificate:
        durationSeconds: 2592000
        renewBeforeSeconds: 2160000
    names:
      servingCertificateSecret: pinniped-concierge-api-tls-serving-certificate
      credentialIssuer: pinniped-concierge-config
      apiService: pinniped-concierge-api
    labels: {"app":"pinniped-concierge"}
    kubeCertAgent:
      namePrefix: pinniped-concierge-kube-cert-agent-
      image: docker.io/getpinniped/pinniped-server:v0.4.3
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pinniped-concierge
  namespace: pinniped-concierge
  labels:
    app: pinniped-concierge
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pinniped-concierge
  template:
    metadata:
      labels:
        app: pinniped-concierge
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
      serviceAccountName: pinniped-concierge
      containers:
      - name: pinniped-concierge
        image: docker.io/getpinniped/pinniped-server:v0.4.3
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 100m
            memory: 128Mi
        args:
        - --config=/etc/config/pinniped.yaml
        - --downward-api-path=/etc/podinfo
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
        - name: podinfo
          mountPath: /etc/podinfo
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 2
          timeoutSeconds: 15
          periodSeconds: 10
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 2
          timeoutSeconds: 3
          periodSeconds: 10
          failureThreshold: 3
      volumes:
      - name: config-volume
        configMap:
          name: pinniped-concierge-config
      - name: podinfo
        downwardAPI:
          items:
          - path: labels
            fieldRef:
              fieldPath: metadata.labels
          - path: name
            fieldRef:
              fieldPath: metadata.name
          - path: namespace
            fieldRef:
              fieldPath: metadata.namespace
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: pinniped-concierge
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: pinniped-concierge-api
  namespace: pinniped-concierge
  labels:
    app: pinniped-concierge
spec:
  type: ClusterIP
  selector:
    app: pinniped-concierge
  ports:
  - protocol: TCP
    port: 443
    targetPort: 8443
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.login.concierge.pinniped.dev
  labels:
    app: pinniped-concierge
spec:
  version: v1alpha1
  group: login.concierge.pinniped.dev
  groupPriorityMinimum: 2500
  versionPriority: 10
  service:
    name: pinniped-concierge-api
    namespace: pinniped-concierge
    port: 443
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pinniped-concierge-aggregated-api-server
  labels:
    app: pinniped-concierge
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiregistration.k8s.io
  resources:
  - apiservices
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  - mutatingwebhookconfigurations
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - policy
  resources:
  - podsecuritypolicies
  verbs:
  - use
- apiGroups:
  - security.openshift.io
  resources:
  - securitycontextconstraints
  verbs:
  - use
  resourceNames:
  - nonroot
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pinniped-concierge-aggregated-api-server
  labels:
    app: pinniped-concierge
subjects:
- kind: ServiceAccount
  name: pinniped-concierge
  namespace: pinniped-concierge
roleRef:
  kind: ClusterRole
  name: pinniped-concierge-aggregated-api-server
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pinniped-concierge-aggregated-api-server
  namespace: pinniped-concierge
  labels:
    app: pinniped-concierge
rules:
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
  - delete
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
  - delete
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
- apiGroups:
  - config.concierge.pinniped.dev
  - authentication.concierge.pinniped.dev
  resources:
  - '*'
  verbs:
  - create
  - get
  - list
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - replicasets
  - deployments
  verbs:
  - get
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pinniped-concierge-aggregated-api-server
  namespace: pinniped-concierge
  labels:
    app: pinniped-concierge
subjects:
- kind: ServiceAccount
  name: pinniped-concierge
  namespace: pinniped-concierge
roleRef:
  kind: Role
  name: pinniped-concierge-aggregated-api-server
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pinniped-concierge-kube-system-pod-read
  namespace: kube-system
  labels:
    app: pinniped-concierge
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pinniped-concierge-kube-system-pod-read
  namespace: kube-system
  labels:
    app: pinniped-concierge
subjects:
- kind: ServiceAccount
  name: pinniped-concierge
  namespace: pinniped-concierge
roleRef:
  kind: Role
  name: pinniped-concierge-kube-system-pod-read
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pinniped-concierge-create-token-credential-requests
  labels:
    app: pinniped-concierge
rules:
- apiGroups:
  - login.concierge.pinniped.dev
  resources:
  - tokencredentialrequests
  verbs:
  - create
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pinniped-concierge-create-token-credential-requests
  labels:
    app: pinniped-concierge
subjects:
- kind: Group
  name: system:authenticated
  apiGroup: rbac.authorization.k8s.io
- kind: Group
  name: system:unauthenticated
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: pinniped-concierge-create-token-credential-requests
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pinniped-concierge
  labels:
    app: pinniped-concierge
subjects:
- kind: ServiceAccount
  name: pinniped-concierge
  namespace: pinniped-concierge
roleRef:
  kind: ClusterRole
  name: system:auth-delegator
  apiGroup: rbac.authorization.k8s.io
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pinniped-concierge-extension-apiserver-authentication-reader
  namespace: kube-system
  labels:
    app: pinniped-concierge
subjects:
- kind: ServiceAccount
  name: pinniped-concierge
  namespace: pinniped-concierge
roleRef:
  kind: Role
  name: extension-apiserver-authentication-reader
  apiGroup: rbac.authorization.k8s.io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pinniped-concierge-cluster-info-lister-watcher
  namespace: kube-public
  labels:
    app: pinniped-concierge
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - list
  - watch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pinniped-concierge-cluster-info-lister-watcher
  namespace: kube-public
  labels:
    app: pinniped-concierge
subjects:
- kind: ServiceAccount
  name: pinniped-concierge
  namespace: pinniped-concierge
roleRef:
  kind: Role
  name: pinniped-concierge-cluster-info-lister-watcher
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Namespace
metadata:
  name: pinniped-supervisor
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pinniped-post-deploy-job-sa
  namespace: pinniped-supervisor
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tkg-pinniped-post-deploy-cluster-role
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  - configmaps
  - services
  - pods
  verbs:
  - get
  - list
  - delete
  - create
  - update
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
- apiGroups:
  - cert-manager.io
  resources:
  - certificates
  verbs:
  - get
  - list
  - delete
  - create
  - update
- apiGroups:
  - config.supervisor.pinniped.dev
  resources:
  - federationdomains
  verbs:
  - get
  - list
  - delete
  - create
  - update
- apiGroups:
  - authentication.concierge.pinniped.dev
  resources:
  - jwtauthenticators
  verbs:
  - get
  - list
  - delete
  - create
  - update
- apiGroups:
  - idp.supervisor.pinniped.dev
  resources:
  - oidcidentityproviders
  verbs:
  - get
  - list
  - update
  - create
  - delete
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tkg-pinniped-post-deploy-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: pinniped-post-deploy-job-sa
  namespace: pinniped-supervisor
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tkg-pinniped-post-deploy-cluster-role
---
apiVersion: batch/v1
kind: Job
metadata:
  name: pinniped-post-deploy-job
  namespace: pinniped-supervisor
  annotations:
    kapp.k14s.io/update-strategy: always-replace
    pinniped-addon-template/hash: ab9a5f40438debe2c9e68a4f80b140cd7cee08c52b13a6a94945a3523ff42c56
spec:
  template:
    spec:
      serviceAccount: pinniped-post-deploy-job-sa
      restartPolicy: Never
      containers:
      - name: pinniped-post-deploy
        image: projects.registry.vmware.com/tce/tanzu_core/addons/tkg-pinniped-post-deploy:v1.3.1
        imagePullPolicy: IfNotPresent
        command:
        - /tkg-pinniped-post-deploy
        - --supervisor-namespace=pinniped-supervisor
        - --concierge-namespace=pinniped-concierge
        - --supervisor-svc-name=pinniped-supervisor
        - --federationdomain-name=pinniped-federation-domain
        - --jwtauthenticator-name=tkg-jwt-authenticator
        - --supervisor-cert-name=pinniped-cert
        - --custom-tls-secret=
        - --dex-namespace=tanzu-system-auth
        - --dex-svc-name=dexsvc
        - --dex-cert-name=dex-cert
        - --dex-configmap-name=dex
        - --is-dex-required=True
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pinniped:view-pinnipedinfo
  namespace: kube-public
rules:
- apiGroups:
  - ""
  resourceNames:
  - pinniped-info
  resources:
  - configmaps
  verbs:
  - get
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pinniped:view-pinnipedinfo
  namespace: kube-public
subjects:
- kind: User
  apiGroup: rbac.authorization.k8s.io
  name: system:anonymous
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pinniped:view-pinnipedinfo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-info-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-info-reader
subjects:
- kind: Group
  name: system:authenticated
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-info-reader
rules:
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  verbs:
  - get
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - awsclusters
  - vsphereclusters
  - azureclusters
  verbs:
  - get
