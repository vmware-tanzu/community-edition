#@ load("@ytt:overlay", "overlay")
#@ load("/values.star", "values", "generateBashCmdForDNS")
#@ load("@ytt:yaml", "yaml")

#@ def is_toleration_specified(toleration):
#@   return toleration in yaml.decode(yaml.encode(values.kappController.deployment.tolerations))
#@ end

#@ default_tolerations = []
#@ is_master_specified = is_toleration_specified({"effect":"NoSchedule", "key":"node-role.kubernetes.io/master"})
#@ is_control_specified = is_toleration_specified({"effect":"NoSchedule", "key":"node-role.kubernetes.io/control-plane"})

#@ if is_master_specified and not is_control_specified:
#@   default_tolerations += [{"effect":"NoSchedule", "key":"node-role.kubernetes.io/control-plane"}]
#@ end

#@overlay/match by=overlay.subset({"kind":"Deployment","metadata":{"name": "kapp-controller"}})
---
metadata:
  annotations:
    #@overlay/match missing_ok=True
    kapp.k14s.io/change-rule: "upsert after upserting apps.kappctrl.k14s.io/kapp-controller-config"
spec:
  template:
    #@overlay/match-child-defaults missing_ok=True
    spec:
      containers:
      #@overlay/match by=overlay.subset({"name":"kapp-controller"})
      - args:
        #@overlay/match by=overlay.subset("-packaging-global-namespace=kapp-controller-packaging-global")
        - #@ "-packaging-global-namespace={}".format(values.kappController.globalNamespace)
        #@overlay/match by=overlay.subset("-tls-cipher-suites=")
        - #@ "-tls-cipher-suites={}".format(values.kappController.deployment.tlsCipherSuites)
        #@overlay/append
        - #@ "-concurrency={}".format(values.kappController.deployment.concurrency)
        #@overlay/append
        - #@ "-metrics-bind-address={}".format(values.kappController.deployment.metricsBindAddress)
        ports:
          #@overlay/match by="name"
          - name: api
            containerPort: #@ values.kappController.deployment.apiPort
        env:
          #@overlay/match by="name"
          - name: KAPPCTRL_API_PORT
            value: #@ str(values.kappController.deployment.apiPort)

      #@overlay/match by=overlay.subset({"name":"kapp-controller-sidecarexec"})
      -
        #@ if/end values.kappController.deployment.coreDNSIP:
        volumeMounts:
          - mountPath: /etc
            name: etc

      #@ if values.kappController.deployment.coreDNSIP:
      #! Using init container bypasses the restriction of not having root access in main container
      #! It modifies /etc/resolv.conf which is shared to main container
      initContainers:
      - args:
        - -c
        - #@ generateBashCmdForDNS(values.kappController.deployment.coreDNSIP)
        command:
        - /bin/sh
        #! Beware, update this image with each version bump!!!!!!!
        #! This image needs to be the same as the image used in basefile
        image: ghcr.io/vmware-tanzu/carvel-kapp-controller@sha256:2c5d238a508e0978490a89ca13c5a4ccb9210558dbcb51d3bb4c37fc59964744
        name: init-kapp-controller
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 0
        volumeMounts:
        - mountPath: /kapp-etc
          name: etc
      #@ end
      #@ if/end values.kappController.deployment.hostNetwork:
      hostNetwork: #@ values.kappController.deployment.hostNetwork
      #@ if/end values.kappController.deployment.priorityClassName:
      priorityClassName: #@ values.kappController.deployment.priorityClassName
      #@ if hasattr(values.kappController.deployment, 'tolerations') and values.kappController.deployment.tolerations:
      tolerations: #@ default_tolerations + values.kappController.deployment.tolerations
      #@ end
      #@ if values.kappController.deployment.coreDNSIP:
      volumes:
        #@overlay/append
        - emptyDir:
            medium: Memory
          name: etc
      #@ end
