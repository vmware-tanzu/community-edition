#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:assert", "assert")

#@ (hasAwsCredsAccessKey, _) = assert.try_to(lambda: len(data.values.aws.credentials.accessKey) > 0)
#@ (hasAwsCredsSecretKey, _) = assert.try_to(lambda: len(data.values.aws.credentials.secretKey) > 0)
#@ if (hasAwsCredsSecretKey and not hasAwsCredsAccessKey) or (not hasAwsCredsSecretKey and hasAwsCredsAccessKey):
#@   assert.fail("`aws.credentials.accessKey` and `aws.credentials.secretKey` must both be provided")
#@ end

#@ if hasAwsCredsAccessKey and hasAwsCredsSecretKey:

#! When providing the `aws.credentials` the provider must be `aws`
#@ if "--provider=aws" not in data.values.deployment.args:
#@   assert.fail("Use of `aws.credentials` requires using the aws provider")
#@ end

---
apiVersion: v1
kind: Secret
metadata:
  name: external-dns-aws-values
  namespace: #@ data.values.namespace
type: Opaque
data:
  awsAccessKeyID: #@ base64.encode("{}".format(data.values.aws.credentials.accessKey))
  awsSecretAccessKey: #@ base64.encode("{}".format(data.values.aws.credentials.secretKey))

#@overlay/match by=overlay.subset({"kind":"Deployment", "metadata":{"name":"external-dns"}})
#@overlay/match-child-defaults missing_ok=True
---
spec:
  template:
    spec:
      containers:
        #@overlay/match by=overlay.subset({"name": "external-dns"})
        - env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: external-dns-aws-values
                  key: awsAccessKeyID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: external-dns-aws-values
                  key: awsSecretAccessKey
#@ end
