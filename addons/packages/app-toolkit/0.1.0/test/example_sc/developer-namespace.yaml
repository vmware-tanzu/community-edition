---
#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")

# workload-user-sa uses registry-credentials and tells kpack where it can
# store images during the build process, including the final deployable image.
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  annotations:
    kpack.io/docker: #@ data.values.kpack.registry.url
type: kubernetes.io/basic-auth
stringData:
  username: #@ data.values.kpack.registry.username
  password: #@ data.values.kpack.registry.password

---
apiVersion: v1  # Developer namespace
kind: ServiceAccount
metadata:
  name: workload-user-sa
  namespace: default
secrets:
- name: registry-credentials
imagePullSecrets:
- name: registry-credentials

---
###
# workload-user-sa is the Role, ServiceAccount and RoleBinding for Cartographer,
# kpack and knative to access the supply chain components on the workload's behalf.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: workload-role # Developer namespace
rules:
  - apiGroups:
      - source.toolkit.fluxcd.io
      - kpack.io
      - kapp.k14s.io/v1alpha1
      - kappctrl.k14s.io
      - serving.knative.dev/v1
      - serving.knative.dev
      - carto.run
      - '*'
    resources:
      - gitrepositories
      - images
      - configs
      - apps
      - services
      - runnables
      - configmaps
    verbs:
      - list
      - create
      - update
      - delete
      - patch
      - watch
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: workload-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: workload-role
subjects:
  - kind: ServiceAccount
    name: workload-user-sa
