#@ load("/values.star", "values")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:struct", "struct")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:sha256", "sha256")

#@overlay/match by=overlay.subset({"kind": "DaemonSet", "metadata": {"name": "vsphere-cloud-controller-manager"}})
---
metadata:
  #@overlay/match missing_ok=True
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: ""
    kapp.k14s.io/update-strategy: fallback-on-replace

spec:
  template:
    metadata:
      #@overlay/match missing_ok=True
      annotations:
        vsphere-cpi/data-values-hash: #@ "h-{}".format(sha256.sum(yaml.encode(values))[:7])
    spec:
      #@overlay/match missing_ok=True
      nodeSelector:
        node-role.kubernetes.io/master: ""
      containers:
      #@overlay/match by=overlay.subset({"name": "vsphere-cloud-controller-manager"})
      - args:
          #@ if values.vsphereCPI.nsxt.podRoutingEnabled:
          #@overlay/append
          - --configure-cloud-routes=true
          #@overlay/append
          - --allocate-node-cidrs=true
          #@overlay/append
          - #@ "--cluster-cidr=" + values.vsphereCPI.nsxt.routes.clusterCidr
          #@ end
          #@overlay/append
          #@yaml/text-templated-strings
          #@ for arg in struct.decode(values.vsphereCPI.cloudProviderExtraArgs):
          - --(@=arg @)=(@=struct.decode(values.vsphereCPI.cloudProviderExtraArgs)[arg]@)
          #@ end
      #@overlay/match by=overlay.subset({"name": "vsphere-cloud-controller-manager"})
      #@overlay/match-child-defaults missing_ok=True
      - env:
        - name: "ENABLE_ALPHA_DUAL_STACK"
          value: "true"
        #@ if values.vsphereCPI.http_proxy != "" :
        - name: "HTTP_PROXY"
          value: #@ values.vsphereCPI.http_proxy
        - name: "HTTPS_PROXY"
          value: #@ values.vsphereCPI.https_proxy
        - name: "NO_PROXY"
          value: #@ values.vsphereCPI.no_proxy
        #@ end
      #@ if values.vsphereCPI.nsxt.podRoutingEnabled and values.vsphereCPI.nsxt.clientCertData != "" and values.vsphereCPI.nsxt.clientCertKeyData != "" :
      #@overlay/match by=overlay.subset({"name": "vsphere-cloud-controller-manager"})
      - volumeMounts:
        #@overlay/append
        - mountPath: /etc/cloud/nsxt
          name: nsxt-certificates-volume
          readOnly: true
      volumes:
      #@overlay/match by=overlay.subset({"name": "vsphere-cloud-controller-manager"})
        #@overlay/append
        - secret:
            secretName: nsxt-tls-certificates
          name: nsxt-certificates-volume
      #@ end
