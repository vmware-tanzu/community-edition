#@ load("@ytt:data", "data")
#@ load("/globals.star", "globals")
#@ load("/helpers.star", "generate_grafana_tls")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:template", "template")
#@ load("/certificates.lib.yaml", "generate_dns_names", "generate_self_signed_issuer", "generate_ca_issuer", "generate_ca_certificate", "generate_certificate")

#@ if data.values.ingress.enabled:
#@ grafana_name = "grafana"
#@ grafana_namespace = data.values.namespace
#@ grafana_organization = "Project Grafana"
#@ grafana_self_signed_ca_issuer = grafana_name + "-self-signed-ca-issuer"
#@ grafana_ca = grafana_name + "-ca"
#@ grafana_ca_common_name = "Grafana CA"
#@ grafana_ca_dns_name = grafana_name + "ca"
#@ grafana_ca_key_pair = grafana_name + "-ca-key-pair"
#@ grafana_ca_issuer = grafana_name + "-ca-issuer"
#@ grafana_cert = grafana_name + "-cert"
#@ grafana_cert_duration = "87600h"
#@ grafana_cert_renew_before = "360h"

--- #@ generate_self_signed_issuer(grafana_self_signed_ca_issuer, grafana_namespace)
--- #@ generate_ca_certificate(grafana_ca, grafana_namespace, grafana_cert_duration, grafana_cert_renew_before, grafana_ca_key_pair, [grafana_organization], grafana_ca_common_name, [grafana_ca_dns_name], grafana_self_signed_ca_issuer)
--- #@ generate_ca_issuer(grafana_ca_issuer, grafana_namespace, grafana_ca_key_pair)

#@ grafana_tls_cert = "grafana-tls-cert"
#@ grafana_tls_secret = "grafana-tls"
#@ grafana_tls_common_name = "grafana"
#@ if generate_grafana_tls():
--- #@ generate_certificate(grafana_tls_cert, grafana_namespace, grafana_cert_duration, grafana_cert_renew_before, grafana_tls_secret, [grafana_organization], grafana_tls_common_name, [data.values.ingress.virtual_host_fqdn, "notary." + data.values.ingress.virtual_host_fqdn], grafana_ca_issuer)
#@ end

#@ if not generate_grafana_tls():
#@ ca_crt = getattr(data.values.ingress.tlsCertificate, "ca.crt")
#@ tls_crt = getattr(data.values.ingress.tlsCertificate, "tls.crt")
#@ tls_key = getattr(data.values.ingress.tlsCertificate, "tls.key")
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ grafana_tls_secret
  namespace: #@ grafana_namespace
type: kubernetes.io/tls
data:
  #@ if/end ca_crt:
  ca.crt: #@ base64.encode(ca_crt)
  tls.crt: #@ base64.encode(tls_crt)
  tls.key: #@ base64.encode(tls_key)
#@ end

#@ end
