#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:template", "template")
#@ load("@ytt:yaml", "yaml")

#@ def get_issuer():
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: "issuer"
  namespace: "issuer-namespace"
spec: {}
#@ end

#@ def self_signed_issuer():
spec:
  #@overlay/match missing_ok=True
  selfSigned: {}
#@ end

#@ def ca_issuer():
spec:
  #@overlay/match missing_ok=True
  ca:
    secretName: "ca-key-pair"
#@ end

#@ def ca_secret(secret_name):
spec:
  ca:
    secretName: #@ secret_name
#@ end

#@ def get_self_signed_issuer():
#@   return overlay.apply(get_issuer(), self_signed_issuer())
#@ end

#@ def get_ca_issuer():
#@   return overlay.apply(get_issuer(), ca_issuer())
#@ end

#@ def generate_self_signed_issuer(name, namespace):
#@   return overlay.apply(get_self_signed_issuer(), metadata(name, namespace))
#@ end

#@ def generate_ca_issuer(name, namespace, secret_name):
#@   return overlay.apply(get_ca_issuer(), metadata(name, namespace), ca_secret(secret_name))
#@ end

#@ def get_certificate():
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: "certificate"
  namespace: "certificate-namespace"
spec:
  secretName: "ca-key-pair"
  duration: 8760h
  renewBefore: 360h
  organization: []
  commonName: "certificate"
  isCA: false
  keySize: 2048
  keyAlgorithm: rsa
  keyEncoding: pkcs1
  usages:
    - server auth
    - client auth
  dnsNames: []
  ipAddresses: []
  issuerRef:
    name: "ca-issuer"
    kind: Issuer
    group: cert-manager.io

#@ end

#@ def ca_certificate(isCA):
spec:
  isCA: #@ isCA
#@ end

#@ def ip_address(ips):
spec:
  #@overlay/replace
  ipAddresses:
  #@ for ip in ips:
    - #@ ip
  #@ end
#@ end

#@ def server_certificate():
spec:
  #@overlay/replace
  usages:
    - server auth
#@ end

#@ def client_certificate():
spec:
  #@overlay/replace
  usages:
    - client auth
#@ end

#@ def get_certificate_with_params(args):
#@   return overlay.apply(get_certificate(), ca_certificate(args[0]), ip_address(args[1]))
#@ end

#@ def get_ca_certificate():
#@   return overlay.apply(get_certificate(), ca_certificate(True))
#@ end

#@ def get_server_certificate():
#@   return overlay.apply(get_certificate(), server_certificate())
#@ end

#@ def get_client_certificate():
#@   return overlay.apply(get_certificate(), client_certificate())
#@ end

#@ def metadata(name, namespace):
metadata:
  name: #@ name
  namespace: #@ namespace
#@ end

#@ def certificate_secret(secret_name):
spec:
  secretName: #@ secret_name
#@ end

#@ def certificate_details(duration, renew_before, organizations, common_name, dns_names):
spec:
  duration: #@ duration
  renewBefore: #@ renew_before
  #@overlay/replace
  organization: #@ organizations
  commonName: #@ common_name
  #@overlay/replace
  dnsNames: #@ dns_names
#@ end

#@ def certificate_issuer(issuer_name):
spec:
  issuerRef:
    name: #@ issuer_name
#@ end

#@ def generate_dns_names(name, namespace):
#@   full_name = name + "." + namespace
#@   svc_name = full_name + ".svc"
#@   svc_cluster_local_name = svc_name + ".cluster.local"
#@   return [name, full_name, svc_name, svc_cluster_local_name]
#@ end

#@ def certificate_generate_args(certificate_func, name, namespace, duration, renew_before, secret_name, organizations, common_name, dns_names, issuer_name, args):
#@  return overlay.apply(certificate_func(args), metadata(name, namespace), certificate_secret(secret_name), certificate_details(duration, renew_before, organizations, common_name, dns_names), certificate_issuer(issuer_name))
#@ end

#@ def certificate_generate(certificate_func, name, namespace, duration, renew_before, secret_name, organizations, common_name, dns_names, issuer_name):
#@  return overlay.apply(certificate_func(), metadata(name, namespace), certificate_secret(secret_name), certificate_details(duration, renew_before, organizations, common_name, dns_names), certificate_issuer(issuer_name))
#@ end

#@ def generate_certificate(name, namespace, duration, renew_before, secret_name, organizations, common_name, dns_names, issuer_name):
#@   return certificate_generate(get_certificate, name, namespace, duration, renew_before, secret_name, organizations, common_name, dns_names, issuer_name)
#@ end

#@ def generate_ca_certificate(name, namespace, duration, renew_before, secret_name, organizations, common_name, dns_names, issuer_name):
#@   return certificate_generate(get_ca_certificate, name, namespace, duration, renew_before, secret_name, organizations, common_name, dns_names, issuer_name)
#@ end

#@ def generate_server_certificate(name, namespace, duration, renew_before, secret_name, organizations, common_name, dns_names, issuer_name):
#@   return certificate_generate(get_server_certificate, name, namespace, duration, renew_before, secret_name, organizations, common_name, dns_names, issuer_name)
#@ end

#@ def generate_client_certificate(name, namespace, duration, renew_before, secret_name, organizations, common_name, dns_names, issuer_name):
#@   return certificate_generate(get_client_certificate, name, namespace, duration, renew_before, secret_name, organizations, common_name, dns_names, issuer_name)
#@ end
