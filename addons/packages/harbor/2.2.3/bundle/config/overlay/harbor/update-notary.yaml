#@ load("/values.star", "values")
#@ load("/globals.star", "get_kapp_annotations")
#@ load("/helpers.star", "get_db_url", "get_external_url", "get_storage_class")
#@ load("/kinds.lib.yaml", "kind_overlays")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:json", "json")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:yaml", "yaml")

#@ kind = kind_overlays

#@ notary_server_metadata = overlay.subset({"metadata": {"name": "harbor-notary-server"}})
#@ notary_signer_metadata = overlay.subset({"metadata": {"name": "harbor-notary-signer"}})
#@ notary_server_container = overlay.subset({"name": "notary-server"})
#@ notary_signer_container = overlay.subset({"name": "notary-signer"})

#@ token_service_certificate_path = "/etc/ssl/token-service/"

#@ def update_server_json(old, _):
#@   js = json.decode(base64.decode(old))
#@   js["storage"]["db_url"] = get_db_url("notaryserver")
#@   js["auth"]["options"]["realm"] = "{}/service/token".format(get_external_url())
#@   js["auth"]["options"]["rootcertbundle"] = "{0}tls.crt".format(token_service_certificate_path)
#@   return base64.encode(json.encode(js))
#@ end

#@ def update_signer_json(old, _):
#@   js = json.decode(base64.decode(old))
#@   js["storage"]["db_url"] = get_db_url("notarysigner")
#@   return base64.encode(json.encode(js))
#@ end

#@overlay/match by=overlay.and_op(kind.secret, notary_server_metadata)
---
metadata:
  #@ annotations = get_kapp_annotations("Secret")
  #@ if annotations:
  #@overlay/match missing_ok=True
  annotations: #@ annotations
  #@ end
data:
  #@overlay/replace via=update_server_json
  server.json:
  #@overlay/replace via=update_signer_json
  signer.json:

#@overlay/match by=overlay.and_op(kind.deployment, overlay.or_op(notary_server_metadata, notary_signer_metadata)),expects=2
---
spec:
  template:
    spec:
      containers:
        #@overlay/match by=overlay.or_op(notary_server_container, notary_signer_container)
        - env:
          #@overlay/match by=overlay.subset({"name": "DB_URL"})
          - value: #@overlay/replace via=lambda a,b: a.replace("changeit", values.database.password)


#! Fix subpath issue when mount secret, see https://github.com/kubernetes/kubernetes/issues/5034

#@overlay/match by=overlay.and_op(kind.deployment, notary_server_metadata)
---
spec:
  template:
    spec:
      containers:
        #@overlay/match by="name"
        - name: notary-server
          volumeMounts:
            #@overlay/match by="name"
            - name: token-service-certificate
              mountPath: #@ token_service_certificate_path
              subPath: #@overlay/remove
            #@overlay/match by="name"
            - name: signer-certificate
              mountPath: /etc/ssl/notary/
              subPath: #@overlay/remove

#@overlay/match by=overlay.and_op(kind.deployment, notary_signer_metadata)
---
spec:
  template:
    spec:
      containers:
        #@overlay/match by="name"
        - name: notary-signer
          volumeMounts:
            #@overlay/match by="mountPath"
            #@overlay/remove
            - mountPath: /etc/ssl/notary/tls.crt
            #@overlay/match by="name"
            - name: signer-certificate
              mountPath: /etc/ssl/notary/
              subPath: #@overlay/remove

#@ if not values.notary.enabled:
#@overlay/match by=notary_server_metadata,expects="1+"
---
#@overlay/remove

#@overlay/match by=notary_signer_metadata,expects="1+"
---
#@overlay/remove
#@ end