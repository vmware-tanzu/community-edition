#@ load("/values.star", "values")
#@ load("/globals.star", "get_kapp_annotations")
#@ load("/helpers.star", "get_storage_class", "use_existing_claim")
#@ load("/kinds.lib.yaml", "kind_overlays")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:yaml", "yaml")

#@ kind = kind_overlays
#@ registry_metadata = overlay.subset({"metadata": {"name": "harbor-registry"}})

#@ registry = values.persistence.persistentVolumeClaim.registry
#@ storage = values.persistence.imageChartStorage

#@ def pvc_required(x, y, z):
#@  return not registry.existingClaim and storage.type == "filesystem"
#@ end

#@ def secret_update_required(x, y, z):
#@  return storage.type != "filesystem"
#@ end

#@ def gcs_storage_right():
encodedkey: #@overlay/remove
#@overlay/match missing_ok=True
keyfile: /etc/registry/gcs-key.json
#@ end

#@ def storage_config():
#@overlay/match-child-defaults missing_ok=True
storage:
  #@ if storage.type == "filesystem":
  filesystem: #@ storage.filesystem
  #@ else:
  filesystem: #@overlay/remove
  #@ end
  #@ if/end storage.type == "azure":
  azure: #@ storage.azure
  #@ if/end storage.type == "gcs":
  gcs: #@ overlay.apply(storage.gcs, gcs_storage_right())
  #@ if/end storage.type == "s3":
  s3: #@ storage.s3
  #@ if/end storage.type == "swift":
  swift: #@ storage.swift
  #@ if/end storage.type == "oss":
  oss: #@ storage.oss
  redirect:
    disable: #@ storage.disableredirect
#@ end

#@ def update_storage_config(old, _):
#@   return yaml.encode(overlay.apply(yaml.decode(old), storage_config()))
#@ end

#@ def storage_secret():
#@overlay/match-child-defaults missing_ok=True
data:
  #@ if/end storage.type == "azure":
  REGISTRY_STORAGE_AZURE_ACCOUNTKEY: #@ base64.encode("{}".format(storage.azure.accountkey))
  #@ if/end storage.type == "gcs":
  GCS_KEY_DATA: #@ storage.gcs.encodedkey
  #@ if storage.type == "s3":
  #@ if/end storage.s3.accesskey:
  REGISTRY_STORAGE_S3_ACCESSKEY: #@ base64.encode("{}".format(storage.s3.accesskey))
  #@ if/end storage.s3.secretkey:
  REGISTRY_STORAGE_S3_SECRETKEY: #@ base64.encode("{}".format(storage.s3.secretkey))
  #@ end
  #@ if storage.type == "swift":
  REGISTRY_STORAGE_SWIFT_PASSWORD: #@ base64.encode("{}".format(storage.swift.password))
  #@ if/end storage.swift.secretkey:
  REGISTRY_STORAGE_SWIFT_SECRETKEY: #@ base64.encode("{}".format(storage.swift.secretkey))
  #@ if/end storage.swift.accesskey:
  REGISTRY_STORAGE_SWIFT_ACCESSKEY: #@ base64.encode("{}".format(storage.swift.accesskey))
  #@ end
  #@ if/end storage.type == "oss":
  REGISTRY_STORAGE_OSS_ACCESSKEYSECRET: #@ base64.encode("{}".format(storage.oss.accesskeysecret))
#@ end

#@ def apply_storage_secret(old, _):
#@   return overlay.apply(old, storage_secret())
#@ end

#@overlay/match by=overlay.and_op(overlay.and_op(kind.persistent_volume_claim, registry_metadata), overlay.not_op(pvc_required)),expects="0+"
---
#@overlay.remove

#@overlay/match by=overlay.and_op(overlay.and_op(kind.persistent_volume_claim, registry_metadata), pvc_required),expects="0+"
---
spec:
  accessModes:
    #@overlay/match by=overlay.all,expects="0+"
    -  #@ registry.accessMode
  resources:
    requests:
      storage: #@ registry.size
  #@ if/end registry.storageClass:
  #@overlay/match missing_ok=True
  storageClassName: #@ get_storage_class(registry.storageClass)


#@overlay/match by=overlay.and_op(overlay.and_op(kind.deployment, registry_metadata), use_existing_claim(registry)),expects="0+"
---
spec:
  template:
    spec:
      volumes:
        #@overlay/match by="name"
        - name: registry-data
          persistentVolumeClaim: #@ registry.existingClaim

#@overlay/match by=overlay.and_op(kind.deployment, registry_metadata)
---
spec:
  replicas: #@ values.registry.replicas
  template:
    spec:
      containers:
        #@overlay/match by="name"
        - name: registry
          volumeMounts:
            #@overlay/match by="name"
            - name:  registry-data
              #@ if/end registry.subPath:
              subPath: #@ registry.subPath

#@overlay/match by=overlay.and_op(kind.configmap, registry_metadata)
---
metadata:
  #@ annotations = get_kapp_annotations("ConfigMap")
  #@ if annotations:
  #@overlay/match missing_ok=True
  annotations: #@ annotations
  #@ end
data:
  #@overlay/replace via=update_storage_config
  config.yml:

#@overlay/match by=overlay.and_op(kind.secret, registry_metadata)
---
metadata:
  #@ annotations = get_kapp_annotations("Secret")
  #@ if annotations:
  #@overlay/match missing_ok=True
  annotations: #@ annotations
  #@ end
data:
  REGISTRY_HTTP_SECRET: #@ base64.encode(values.registry.secret)

#@overlay/match by=overlay.and_op(overlay.and_op(kind.secret, registry_metadata), secret_update_required),expects="0+"
#@overlay/replace via=apply_storage_secret
---


## Fix subpath issue when mount secret, see https://github.com/kubernetes/kubernetes/issues/5034
## registry-root-certificate is not needed because registry is changed to basic auth now

#@overlay/match by=overlay.and_op(kind.deployment, registry_metadata)
---
spec:
  template:
    spec:
      containers:
        #@overlay/match by="name"
        - name: registry
          volumeMounts:
            #@overlay/match by="name"
            #@overlay/remove
            - name: registry-root-certificate
      volumes:
        #@overlay/match by="name"
        #@overlay/remove
        - name: registry-root-certificate
