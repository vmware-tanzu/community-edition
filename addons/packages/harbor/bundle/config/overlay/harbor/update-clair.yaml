#@ load("/values.star", "values")
#@ load("/globals.star", "get_kapp_annotations")
#@ load("/helpers.star", "get_db_url", "get_no_proxy")
#@ load("/kinds.lib.yaml", "kind_overlays")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:yaml", "yaml")

#@ kind = kind_overlays
#@ clair_metadata = overlay.subset({"metadata": {"name": "harbor-clair"}})


#@ def clair_config():
clair:
  database:
    options:
      source: #@ get_db_url("postgres")
  updater:
    interval: #@ values.clair.updatersInterval
#@ end

#@ def update_clair_config(old, _):
#@   left = yaml.decode(base64.decode(old))
#@   right = clair_config()
#@   return base64.encode(yaml.encode(overlay.apply(left, right)))
#@ end

#@overlay/match by=overlay.and_op(kind.secret, clair_metadata)
---
metadata:
  #@ annotations = get_kapp_annotations("Secret")
  #@ if annotations:
  #@overlay/match missing_ok=True
  annotations: #@ annotations
  #@ end
data:
  #@overlay/replace via=update_clair_config
  config.yaml:
  database: #@ base64.encode(get_db_url("postgres"))

#@overlay/match by=overlay.and_op(kind.deployment, clair_metadata)
---
spec:
  replicas: #@ values.clair.replicas
  template:
    spec:
      containers:
        #@overlay/match by="name"
        - name: clair
          env:
            #@ if/end values.proxy.httpProxy:
            #@overlay/match by="name"
            - name: HTTP_PROXY
              value: #@ values.proxy.httpProxy
            #@ if/end values.proxy.httpsProxy:
            #@overlay/match by="name"
            - name: HTTPS_PROXY
              value: #@ values.proxy.httpsProxy
            #@overlay/match by="name"
            - name: NO_PROXY
              value: #@ get_no_proxy()

#@ if not values.clair.enabled:
#@overlay/match by=clair_metadata,expects="1+"
---
#@overlay/remove
#@ end