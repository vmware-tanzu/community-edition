#@ load("@ytt:data", "data")
#@ load("/globals.star", "globals")
#@ load("/helpers.star", "generate_prometheus_tls")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:template", "template")
#@ load("/certificates.lib.yaml", "generate_dns_names", "generate_self_signed_issuer", "generate_ca_issuer", "generate_ca_certificate", "generate_certificate")
#@ if data.values.ingress.enabled:

#@ prometheus_name = "prometheus"
#@ prometheus_namespace = data.values.namespace
#@ prometheus_organization = "Project Prometheus"
#@ prometheus_self_signed_ca_issuer = prometheus_name + "-self-signed-ca-issuer"
#@ prometheus_ca = prometheus_name + "-ca"
#@ prometheus_ca_common_name = "Prometheus CA"
#@ prometheus_ca_dns_name = prometheus_name + "ca"
#@ prometheus_ca_key_pair = prometheus_name + "-ca-key-pair"
#@ prometheus_ca_issuer = prometheus_name + "-ca-issuer"
#@ prometheus_cert = prometheus_name + "-cert"
#@ prometheus_cert_duration = "87600h"
#@ prometheus_cert_renew_before = "360h"

--- #@ generate_self_signed_issuer(prometheus_self_signed_ca_issuer, prometheus_namespace)
--- #@ generate_ca_certificate(prometheus_ca, prometheus_namespace, prometheus_cert_duration, prometheus_cert_renew_before, prometheus_ca_key_pair, [prometheus_organization], prometheus_ca_common_name, [prometheus_ca_dns_name], prometheus_self_signed_ca_issuer)
--- #@ generate_ca_issuer(prometheus_ca_issuer, prometheus_namespace, prometheus_ca_key_pair)

#@ prometheus_tls_cert = "prometheus-tls-cert"
#@ prometheus_tls_secret = "prometheus-tls"
#@ prometheus_tls_common_name = "prometheus"
#@ if generate_prometheus_tls():
--- #@ generate_certificate(prometheus_tls_cert, prometheus_namespace, prometheus_cert_duration, prometheus_cert_renew_before, prometheus_tls_secret, [prometheus_organization], prometheus_tls_common_name, [data.values.ingress.virtual_host_fqdn, "notary." + data.values.ingress.virtual_host_fqdn], prometheus_ca_issuer)
#@ end

#@ if not generate_prometheus_tls():
#@ ca_crt = getattr(data.values.ingress.tlsCertificate, "ca.crt")
#@ tls_crt = getattr(data.values.ingress.tlsCertificate, "tls.crt")
#@ tls_key = getattr(data.values.ingress.tlsCertificate, "tls.key")
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ prometheus_tls_secret
  namespace: #@ prometheus_namespace
type: kubernetes.io/tls
data:
  #@ if/end ca_crt:
  ca.crt: #@ base64.encode(ca_crt)
  tls.crt: #@ base64.encode(tls_crt)
  tls.key: #@ base64.encode(tls_key)
#@ end

#@ end
