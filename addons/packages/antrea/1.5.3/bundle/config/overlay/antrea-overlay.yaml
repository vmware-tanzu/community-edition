#! antrea-overlay.yaml

#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:yaml", "yaml")
#@ load("/values.star", "values")

#@ def antrea_agent_conf():

#! FeatureGates is a map of feature names to bools that enable or disable experimental features.
featureGates:
  #! Enable AntreaProxy which provides ServiceLB for in-cluster Services in antrea-agent.
  #! It should be enabled on Windows, otherwise NetworkPolicy will not take effect on
  #! Service traffic.
  AntreaProxy: #@ values.antrea.config.featureGates.AntreaProxy

  #! Enable EndpointSlice support in AntreaProxy. Don't enable this feature unless that EndpointSlice
  #! API version v1beta1 is supported and set as enabled in Kubernetes. If AntreaProxy is not enabled,
  #! this flag will not take effect.
  EndpointSlice: #@ values.antrea.config.featureGates.EndpointSlice

  #! Enable traceflow which provides packet tracing feature to diagnose network issue.
  Traceflow: #@ values.antrea.config.featureGates.AntreaTraceflow

  #! Enable NodePortLocal feature to make the pods reachable externally through NodePort
  NodePortLocal: #@ values.antrea.config.featureGates.NodePortLocal

  #! Enable Antrea ClusterNetworkPolicy feature to complement K8s NetworkPolicy for cluster admins
  #! to define security policies which apply to the entire cluster, and Antrea NetworkPolicy
  #! feature that supports priorities, rule actions and externalEntities in the future.
  AntreaPolicy: #@ values.antrea.config.featureGates.AntreaPolicy

  #! Enable flowexporter which exports polled conntrack connections as IPFIX flow records from each
  #! agent to a configured collector.
  FlowExporter: #@ values.antrea.config.featureGates.FlowExporter

  #! Enable collecting and exposing NetworkPolicy statistics.
  NetworkPolicyStats: #@ values.antrea.config.featureGates.NetworkPolicyStats

  #! Enable controlling SNAT IPs of Pod egress traffic.
  Egress: #@ values.antrea.config.featureGates.Egress

  #! Enable flexible IPAM mode for Antrea. This mode allows to assign IP Ranges to Namespaces,
  #! Deployments and StatefulSets via IP Pool annotation.
  AntreaIPAM: #@ values.antrea.config.featureGates.AntreaIPAM

  #! Enable multicast traffic. This feature is supported only with noEncap mode.
  Multicast: #@ values.antrea.config.featureGates.Multicast

  #! Enable managing external IPs of Services of LoadBalancer type.
  ServiceExternalIP: #@ values.antrea.config.featureGates.ServiceExternalIP

#! Name of the OpenVSwitch bridge antrea-agent will create and use.
#! Make sure it doesn't conflict with your existing OpenVSwitch bridges.
#!ovsBridge: br-int

#! Datapath type to use for the OpenVSwitch bridge created by Antrea. Supported values are:
#! - system
#! - netdev
#! 'system' is the default value and corresponds to the kernel datapath. Use 'netdev' to run
#! OVS in userspace mode. Userspace mode requires the tun device driver to be available.
#@ if values.infraProvider == "docker":
ovsDatapathType: netdev
#@ end

#! Name of the interface antrea-agent will create and use for host <--> pod communication.
#! Make sure it doesn't conflict with your existing interfaces.
#!hostGateway: antrea-gw0

#! Determines how traffic is encapsulated. It has the following options:
#! encap(default):    Inter-node Pod traffic is always encapsulated and Pod to external network
#!                    traffic is SNAT'd.
#! noEncap:           Inter-node Pod traffic is not encapsulated; Pod to external network traffic is
#!                    SNAT'd if noSNAT is not set to true. Underlying network must be capable of
#!                    supporting Pod traffic across IP subnets.
#! hybrid:            noEncap if source and destination Nodes are on the same subnet, otherwise encap.
#! networkPolicyOnly: Antrea enforces NetworkPolicy only, and utilizes CNI chaining and delegates Pod
#!                    IPAM and connectivity to the primary CNI.
#!
trafficEncapMode: #@ values.antrea.config.trafficEncapMode

#! Whether or not to SNAT (using the Node IP) the egress traffic from a Pod to the external network.
#! This option is for the noEncap traffic mode only, and the default value is false. In the noEncap
#! mode, if the cluster's Pod CIDR is reachable from the external network, then the Pod traffic to
#! the external network needs not be SNAT'd. In the networkPolicyOnly mode, antrea-agent never
#! performs SNAT and this option will be ignored; for other modes it must be set to false.
noSNAT: #@ values.antrea.config.noSNAT

#! Tunnel protocols used for encapsulating traffic across Nodes. Supported values:
#! - geneve (default)
#! - vxlan
#! - gre
#! - stt
tunnelType: #@ values.antrea.config.tunnelType

#! Determines how tunnel traffic is encrypted. Currently encryption only works with encap mode.
#! It has the following options:
#! - none (default):  Inter-node Pod traffic will not be encrypted.
#! - ipsec:           Enable IPsec (ESP) encryption for Pod traffic across Nodes. Antrea uses
#!                    Preshared Key (PSK) for IKE authentication. When IPsec tunnel is enabled,
#!                    the PSK value must be passed to Antrea Agent through an environment
#!                    variable: ANTREA_IPSEC_PSK.
#! - wireGuard:       Enable WireGuard for tunnel traffic encryption.
trafficEncryptionMode: #@ values.antrea.config.trafficEncryptionMode

#! Default MTU to use for the host gateway interface and the network interface of each Pod.
#! If omitted, antrea-agent will discover the MTU of the Node's primary interface and
#! also adjust MTU to accommodate for tunnel encapsulation overhead (if applicable).
#@ if/end values.antrea.config.defaultMTU:
defaultMTU: #@ values.antrea.config.defaultMTU

#! wireGuard specifies WireGuard related configurations.
wireGuard:
#@ if values.antrea.config.wireGuard:
  #!  The port for WireGuard to receive traffic.
  port: #@ values.antrea.config.wireGuard.port
#@ end

egress:
#@ if values.antrea.config.featureGates.Egress:
  #! exceptCIDRs is the CIDR ranges to which outbound Pod traffic will not be SNAT'd by Egresses.
  exceptCIDRs: #@ values.antrea.config.egress.exceptCIDRs
#@ end

#! ClusterIP CIDR range for Services. It's required when AntreaProxy is not enabled, and should be
#! set to the same value as the one specified by --service-cluster-ip-range for kube-apiserver. When
#! AntreaProxy is enabled, this parameter is not needed and will be ignored if provided.
serviceCIDR: #@ values.antrea.config.serviceCIDR

#! ClusterIP CIDR range for IPv6 Services. It's required when using kube-proxy to provide IPv6 Service in a Dual-Stack
#! cluster or an IPv6 only cluster. The value should be the same as the configuration for kube-apiserver specified by
#! --service-cluster-ip-range. When AntreaProxy is enabled, this parameter is not needed.
#! No default value for this field.
#@ if/end values.antrea.config.serviceCIDRv6:
serviceCIDRv6: #@ values.antrea.config.serviceCIDRv6

#! The port for the antrea-agent APIServer to serve on.
#! Note that if it's set to another value, the `containerPort` of the `api` port of the
#! `antrea-agent` container must be set to the same value.
#!apiPort: 10350

#! Enable metrics exposure via Prometheus. Initializes Prometheus metrics listener.
#!enablePrometheusMetrics: true

#! Provide the IPFIX collector address as a string with format <HOST>:[<PORT>][:<PROTO>].
#! HOST can either be the DNS name or the IP of the Flow Collector. For example,
#! "flow-aggregator.flow-aggregator.svc" can be provided as DNS name to connect
#! to the Antrea Flow Aggregator service. If IP, it can be either IPv4 or IPv6.
#! However, IPv6 address should be wrapped with [].
#! If PORT is empty, we default to 4739, the standard IPFIX port.
#! If no PROTO is given, we consider "tls" as default. We support "tls", "tcp" and
#! "udp" protocols. "tls" is used for securing communication between flow exporter and
#! flow aggregator.
#@ if/end values.antrea.config.featureGates.FlowExporter:
flowCollectorAddr: #@ values.antrea.config.flowExporter.collectorAddress

#! Provide flow poll interval as a duration string. This determines how often the flow exporter dumps connections from the conntrack module.
#! Flow poll interval should be greater than or equal to 1s (one second).
#! Valid time units are "ns", "us" (or "Âµs"), "ms", "s", "m", "h".
#@ if/end values.antrea.config.featureGates.FlowExporter:
flowPollInterval: #@ values.antrea.config.flowExporter.pollInterval

#! Provide the active flow export timeout, which is the timeout after which a flow
#! record is sent to the collector for active flows. Thus, for flows with a continuous
#! stream of packets, a flow record will be exported to the collector once the elapsed
#! time since the last export event is equal to the value of this timeout.
#! Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
#@ if/end values.antrea.config.featureGates.FlowExporter:
activeFlowExportTimeout: #@ values.antrea.config.flowExporter.activeFlowTimeout

#! Provide the idle flow export timeout, which is the timeout after which a flow
#! record is sent to the collector for idle flows. A flow is considered idle if no
#! packet matching this flow has been observed since the last export event.
#! Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
#@ if/end values.antrea.config.featureGates.FlowExporter:
idleFlowExportTimeout:  #@ values.antrea.config.flowExporter.idleFlowTimeout

nodePortLocal:
#@ if values.antrea.config.featureGates.NodePortLocal:
  #! Enable NodePortLocal, a feature used to make Pods reachable using port forwarding on the host. To
  #! enable this feature, you need to set "enable" to true, and ensure that the NodePortLocal feature
  #! gate is also enabled (which is the default).
  enable: #@ values.antrea.config.nodePortLocal.enabled
  #! Provide the port range used by NodePortLocal. When the NodePortLocal feature is enabled, a port
  #! from that range will be assigned whenever a Pod's container defines a specific port to be exposed
  #! (each container can define a list of ports as pod.spec.containers[].ports), and all Node traffic
  #! directed to that port will be forwarded to the Pod.
  portRange: #@ values.antrea.config.nodePortLocal.portRange
#@ end

#! Provide the address of Kubernetes apiserver, to override any value provided in kubeconfig or InClusterConfig.
#! Defaults to "". It must be a host string, a host:port pair, or a URL to the base of the apiserver.
#@ if/end values.antrea.config.kubeAPIServerOverride:
kubeAPIServerOverride: #@ values.antrea.config.kubeAPIServerOverride

#! Comma-separated list of Cipher Suites. If omitted, the default Go Cipher Suites will be used.
#! https://golang.org/pkg/crypto/tls/#pkg-constants
#! Note that TLS1.3 Cipher Suites cannot be added to the list. But the apiserver will always
#! prefer TLS1.3 Cipher Suites whenever possible.
tlsCipherSuites: #@ values.antrea.config.tlsCipherSuites

#! TLS min version from: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.
#!tlsMinVersion:

#! The name of the interface on Node which is used for tunneling or routing the traffic across Nodes.
#! If there are multiple IP addresses configured on the interface, the first one is used. The IP
#! address used for tunneling or routing traffic to remote Nodes is decided in the following order of
#! preference (from highest to lowest):
#! 1. transportInterface
#! 2. transportInterfaceCIDRs
#! 3. The Node IP
#@ if/end values.antrea.config.transportInterface:
transportInterface: #@ values.antrea.config.transportInterface

#! The names of the interfaces on Nodes that are used to forward multicast traffic.
#! Defaults to transport interface if not set.
#@ if/end values.antrea.config.multicastInterfaces:
multicastInterfaces: #@ values.antrea.config.multicastInterfaces

#! The network CIDRs of the interface on Node which is used for tunneling or routing the traffic across
#! Nodes. If there are multiple interfaces configured the same network CIDR, the first one is used. The
#! IP address used for tunneling or routing traffic to remote Nodes is decided in the following order of
#! preference (from highest to lowest):
#! 1. transportInterface
#! 2. transportInterfaceCIDRs
#! 3. The Node IP
#@ if/end values.antrea.config.transportInterfaceCIDRs:
transportInterfaceCIDRs: #@ values.antrea.config.transportInterfaceCIDRs

#! Option antreaProxy contains AntreaProxy related configuration options.
antreaProxy:
#@ if values.antrea.config.featureGates.AntreaProxy:
  #!  ProxyAll tells antrea-agent to proxy all Service traffic, including NodePort, LoadBalancer, and ClusterIP traffic,
  #!  regardless of where they come from. Therefore, running kube-proxy is no longer required. This requires the AntreaProxy
  #!  feature to be enabled.
  #!  Note that this option is experimental. If kube-proxy is removed, option kubeAPIServerOverride must be used to access
  #!  apiserver directly.
  proxyAll: #@ values.antrea.config.antreaProxy.proxyAll
  #!  A string array of values which specifies the host IPv4/IPv6 addresses for NodePort. Values can be valid IP blocks.
  #!  (e.g. 1.2.3.0/24, 1.2.3.4/32). An empty string slice is meant to select all host IPv4/IPv6 addresses.
  #!  Note that the option is only valid when proxyAll is true.
  nodePortAddresses: #@ values.antrea.config.antreaProxy.nodePortAddresses
  #!  An array of string values to specify a list of Services which should be ignored by AntreaProxy (traffic to these
  #!  Services will not be load-balanced). Values can be a valid ClusterIP (e.g. 10.11.1.2) or a Service name
  #!  with Namespace (e.g. kube-system/kube-dns)
  skipServices: #@ values.antrea.config.antreaProxy.skipServices
  #!  When ProxyLoadBalancerIPs is set to false, AntreaProxy no longer load-balances traffic destined to the
  #!  External IPs of LoadBalancer Services. This is useful when the external LoadBalancer provides additional
  #!  capabilities (e.g. TLS termination) and it is desirable for Pod-to-ExternalIP traffic to be sent to the
  #!  external LoadBalancer instead of being load-balanced to an Endpoint directly by AntreaProxy.
  #!  Note that setting ProxyLoadBalancerIPs to false usually only makes sense when ProxyAll is set to true and
  #!  kube-proxy is removed from the cluser, otherwise kube-proxy will still load-balance this traffic.
  proxyLoadBalancerIPs: #@ values.antrea.config.antreaProxy.proxyLoadBalancerIPs
#@ end

#@ end


#@ def antrea_controller_conf():

#! FeatureGates is a map of feature names to bools that enable or disable experimental features.
featureGates:
  #! Enable traceflow which provides packet tracing feature to diagnose network issue.
  Traceflow: #@ values.antrea.config.featureGates.AntreaTraceflow

  #! Enable Antrea ClusterNetworkPolicy feature to complement K8s NetworkPolicy for cluster admins
  #! to define security policies which apply to the entire cluster, and Antrea NetworkPolicy
  #! feature that supports priorities, rule actions and externalEntities in the future.
  AntreaPolicy: #@ values.antrea.config.featureGates.AntreaPolicy

  #! Enable collecting and exposing NetworkPolicy statistics.
  NetworkPolicyStats: #@ values.antrea.config.featureGates.NetworkPolicyStats

  #! Enable controlling SNAT IPs of Pod egress traffic.
  Egress: #@ values.antrea.config.featureGates.Egress

  #! Enable flexible IPAM mode for Antrea. This mode allows to assign IP Ranges to Namespaces,
  #! Deployments and StatefulSets via IP Pool annotation.
  AntreaIPAM: #@ values.antrea.config.featureGates.AntreaIPAM

  #! Enable managing external IPs of Services of LoadBalancer type.
  ServiceExternalIP: #@ values.antrea.config.featureGates.ServiceExternalIP

#! The port for the antrea-controller APIServer to serve on.
#! Note that if it's set to another value, the `containerPort` of the `api` port of the
#! `antrea-controller` container must be set to the same value.
#!apiPort: 10349

#! Enable metrics exposure via Prometheus. Initializes Prometheus metrics listener.
#!enablePrometheusMetrics: true

#! Indicates whether to use auto-generated self-signed TLS certificate.
#! If false, A Secret named "antrea-controller-tls" must be provided with the following keys:
#!   ca.crt: <CA certificate>
#!   tls.crt: <TLS certificate>
#!   tls.key: <TLS private key>
#! And the Secret must be mounted to directory "/var/run/antrea/antrea-controller-tls" of the
#! antrea-controller container.
#! selfSignedCert: true

#! Comma-separated list of Cipher Suites. If omitted, the default Go Cipher Suites will be used.
#! https://golang.org/pkg/crypto/tls/#pkg-constants
#! Note that TLS1.3 Cipher Suites cannot be added to the list. But the apiserver will always
#! prefer TLS1.3 Cipher Suites whenever possible.
tlsCipherSuites: #@ values.antrea.config.tlsCipherSuites

#! TLS min version from: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.
#!tlsMinVersion:

#! If Antrea is upgraded from version <= v0.13 and legacy CRDs are used, this option should be
#! enabled, otherwise the CRDs created with the legacy API groups will not take any effect and
#! work as expected. When the mirroring is enabled, if a legacy CRD is created with legacy API
#! groups, mirroring-controller will create a new CRD with the Spec and Labels from the legacy
#! CRD. Afterwards, the modification of Spec and Label in legacy CRD will be synchronized to new
#! CRD automatically. In addition, the modification of Status in new CRD will also be synchronized
#! to legacy CRD automatically. If a legacy CRD is deleted, the corresponding new CRD will be deleted.
#! Note that: to decouple a new CRD from the corresponding legacy CRD, the legacy CRD should be
#! annotated with "crd.antrea.io/stop-mirror". Afterwards, updates to the legacy CRDs will no
#! longer be reflected in the new CRD, and all CRUD operations should be done through the new
#! API groups. After adding the annotation, legacy CRDs can be deleted safely without impacting
#! new CRDs.
#! legacyCRDMirroring: true

nodeIPAM:
#! Enable the integrated Node IPAM controller within the Antrea controller.
#!  enableNodeIPAM: #@ values.antrea.config.nodeIPAM

#! CIDR ranges for Pods in cluster. String array containing single CIDR range, or multiple ranges.
#! The CIDRs could be either IPv4 or IPv6. At most one CIDR may be specified for each IP family.
#! Value ignored when enableNodeIPAM is false.
#!  clusterCIDRs: []

#! CIDR ranges for Services in cluster. It is not necessary to specify it when there is no overlap with clusterCIDRs.
#! Value ignored when enableNodeIPAM is false.
#!  serviceCIDR:
#!  serviceCIDRv6:

#! Mask size for IPv6 Node CIDR in IPv6 or dual-stack cluster. Value ignored when enableNodeIPAM is false
#! or when IPv6 Pod CIDR is not configured. Valid range is 64 to 126.
#!  nodeCIDRMaskSizeIPv6: 64
#! Enable usage reporting (telemetry) to VMware.
#@ if/end values.antrea.config.enableUsageReporting:
enableUsageReporting: #@ values.antrea.config.enableUsageReporting

#@ end


#@ def antrea_agent_tweaker_conf():

#! Enable disableUdpTunnelOffload will disable udp tunnel offloading feature on kubernetes node's default interface.
#! By default, no actions will be taken.
disableUdpTunnelOffload: #@ values.antrea.config.disableUdpTunnelOffload
#@ end


#! Antrea agent and controller configuration
#@overlay/match by=overlay.subset({"kind":"ConfigMap","metadata":{"name": "antrea-config-f5d8g47b88"}})
---
kind: ConfigMap
data:
  antrea-agent.conf: #@ yaml.encode(antrea_agent_conf())
  antrea-controller.conf: #@ yaml.encode(antrea_controller_conf())


#! Antrea agent tweaker configuration
#@overlay/match by=overlay.subset({"kind":"ConfigMap","metadata":{"name": "antrea-agent-tweaker-g56hc6fh8t"}})
---
kind: ConfigMap
data:
  antrea-agent-tweaker.conf: #@ yaml.encode(antrea_agent_tweaker_conf())


#@overlay/match by=overlay.subset({"kind":"Deployment","metadata":{"name": "antrea-controller"}})
---
kind: Deployment
metadata:
  name: antrea-controller
  #@overlay/match missing_ok=True
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: ""


#@overlay/match by=overlay.subset({"kind":"DaemonSet","metadata":{"name": "antrea-agent"}})
---
kind: DaemonSet
metadata:
  #@overlay/match missing_ok=True
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: ""
spec:
  template:
    spec:
      containers:
        #@ if values.infraProvider == "docker":
        #@overlay/match by=overlay.subset({"name":"antrea-ovs"})
        - command:
            #@overlay/match by=overlay.subset("start_ovs")
            #@overlay/replace
            - start_ovs_netdev

        #@overlay/match by=overlay.subset({"name":"antrea-ovs"})
        - volumeMounts:
            #@overlay/append
            - mountPath: /dev/net/tun
              name: dev-tun
        #@ end

      initContainers:
        #@ if values.infraProvider == "docker":
        #@overlay/match by=overlay.subset({"name":"install-cni"})
        - command:
            #@overlay/match by=overlay.subset("install_cni")
            #@overlay/replace
            - install_cni_kind
        #@ end
      volumes:
        #@ if values.infraProvider == "docker":
        #@overlay/append
        - hostPath:
            path: /dev/net/tun
            type: CharDevice
          name: dev-tun
      #@ end
