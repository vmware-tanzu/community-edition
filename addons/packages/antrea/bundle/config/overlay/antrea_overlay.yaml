#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:yaml", "yaml")
#@ load("/values.star", "values")

#@ def antrea_agent_conf():

#! FeatureGates is a map of feature names to bools that enable or disable experimental features.
featureGates:
#! Enable AntreaProxy which provides ServiceLB for in-cluster Services in antrea-agent.
#! It should be enabled on Windows, otherwise NetworkPolicy will not take effect on
#! Service traffic.
  AntreaProxy: #@ values.antrea.config.featureGates.AntreaProxy

#! Enable traceflow which provides packet tracing feature to diagnose network issue.
  Traceflow: #@ values.antrea.config.featureGates.AntreaTraceflow

#! Enable Antrea ClusterNetworkPolicy feature to complement K8s NetworkPolicy for cluster admins
#! to define security policies which apply to the entire cluster, and Antrea NetworkPolicy
#! feature that supports priorities, rule actions and externalEntities in the future.
  AntreaPolicy: #@ values.antrea.config.featureGates.AntreaPolicy

#! Enable flowexporter which exports polled conntrack connections as IPFIX flow records from each
#! agent to a configured collector.
  FlowExporter: #@ values.antrea.config.featureGates.FlowExporter

#! Enable collecting and exposing NetworkPolicy statistics.
  NetworkPolicyStats: #@ values.antrea.config.featureGates.NetworkPolicyStats

#! Name of the OpenVSwitch bridge antrea-agent will create and use.
#! Make sure it doesn't conflict with your existing OpenVSwitch bridges.
#!ovsBridge: br-int

#! Datapath type to use for the OpenVSwitch bridge created by Antrea. Supported values are:
#! - system
#! - netdev
#! 'system' is the default value and corresponds to the kernel datapath. Use 'netdev' to run
#! OVS in userspace mode. Userspace mode requires the tun device driver to be available.
#@ if values.infraProvider == "docker":
ovsDatapathType: netdev
#@ end

#! Name of the interface antrea-agent will create and use for host <--> pod communication.
#! Make sure it doesn't conflict with your existing interfaces.
#!hostGateway: antrea-gw0

#! Determines how traffic is encapsulated. It has the following options:
#! encap(default):    Inter-node Pod traffic is always encapsulated and Pod to external network
#!                    traffic is SNAT'd.
#! noEncap:           Inter-node Pod traffic is not encapsulated; Pod to external network traffic is
#!                    SNAT'd if noSNAT is not set to true. Underlying network must be capable of
#!                    supporting Pod traffic across IP subnets.
#! hybrid:            noEncap if source and destination Nodes are on the same subnet, otherwise encap.
#! networkPolicyOnly: Antrea enforces NetworkPolicy only, and utilizes CNI chaining and delegates Pod
#!                    IPAM and connectivity to the primary CNI.
#!
trafficEncapMode: #@ values.antrea.config.trafficEncapMode

#! Whether or not to SNAT (using the Node IP) the egress traffic from a Pod to the external network.
#! This option is for the noEncap traffic mode only, and the default value is false. In the noEncap
#! mode, if the cluster's Pod CIDR is reachable from the external network, then the Pod traffic to
#! the external network needs not be SNAT'd. In the networkPolicyOnly mode, antrea-agent never
#! performs SNAT and this option will be ignored; for other modes it must be set to false.
noSNAT: #@ values.antrea.config.noSNAT

#! Tunnel protocols used for encapsulating traffic across Nodes. Supported values:
#! - geneve (default)
#! - vxlan
#! - gre
#! - stt
#!tunnelType: geneve

#! Default MTU to use for the host gateway interface and the network interface of each Pod.
#! If omitted, antrea-agent will discover the MTU of the Node's primary interface and
#! also adjust MTU to accommodate for tunnel encapsulation overhead (if applicable).
#@ if/end values.antrea.config.defaultMTU:
defaultMTU: #@ values.antrea.config.defaultMTU

#! Whether or not to enable IPsec encryption of tunnel traffic. IPsec encryption is only supported
#! for the GRE tunnel type.
#!enableIPSecTunnel: false

#! ClusterIP CIDR range for Services. It's required when AntreaProxy is not enabled, and should be
#! set to the same value as the one specified by --service-cluster-ip-range for kube-apiserver. When
#! AntreaProxy is enabled, this parameter is not needed and will be ignored if provided.
#!serviceCIDR: 10.96.0.0/12
serviceCIDR: #@ values.antrea.config.serviceCIDR

#! ClusterIP CIDR range for IPv6 Services. It's required when using kube-proxy to provide IPv6 Service in a Dual-Stack
#! cluster or an IPv6 only cluster. The value should be the same as the configuration for kube-apiserver specified by
#! --service-cluster-ip-range. When AntreaProxy is enabled, this parameter is not needed.
#! No default value for this field.
#!serviceCIDRv6:

#! The port for the antrea-agent APIServer to serve on.
#! Note that if it's set to another value, the `containerPort` of the `api` port of the
#! `antrea-agent` container must be set to the same value.
#!apiPort: 10350

#! Enable metrics exposure via Prometheus. Initializes Prometheus metrics listener.
#!enablePrometheusMetrics: true

#! Provide flow collector address as string with format <IP>:<port>[:<proto>], where proto is tcp or udp. This also enables
#! the flow exporter that sends IPFIX flow records of conntrack flows on OVS bridge. If no L4 transport proto is given,
#! we consider tcp as default.
#!flowCollectorAddr: ""

#! Provide flow poll interval as a duration string. This determines how often the flow exporter dumps connections from the conntrack module.
#! Flow poll interval should be greater than or equal to 1s (one second).
#! Valid time units are "ns", "us" (or "Âµs"), "ms", "s", "m", "h".
#!flowPollInterval: "5s"

#! Provide flow export frequency, which is the number of poll cycles elapsed before flow exporter exports flow records to
#! the flow collector.
#! Flow export frequency should be greater than or equal to 1.
#!flowExportFrequency: 12

#@ end


#@ def antrea_controller_conf():

#! FeatureGates is a map of feature names to bools that enable or disable experimental features.
featureGates:
#! Enable traceflow which provides packet tracing feature to diagnose network issue.
  Traceflow: #@ values.antrea.config.featureGates.AntreaTraceflow

#! Enable Antrea ClusterNetworkPolicy feature to complement K8s NetworkPolicy for cluster admins
#! to define security policies which apply to the entire cluster, and Antrea NetworkPolicy
#! feature that supports priorities, rule actions and externalEntities in the future.
  AntreaPolicy: #@ values.antrea.config.featureGates.AntreaPolicy

#! Enable collecting and exposing NetworkPolicy statistics.
  NetworkPolicyStats: #@ values.antrea.config.featureGates.NetworkPolicyStats

#! The port for the antrea-controller APIServer to serve on.
#! Note that if it's set to another value, the `containerPort` of the `api` port of the
#! `antrea-controller` container must be set to the same value.
#!apiPort: 10349

#! Enable metrics exposure via Prometheus. Initializes Prometheus metrics listener.
#!enablePrometheusMetrics: true

#! Indicates whether to use auto-generated self-signed TLS certificate.
#! If false, A Secret named "antrea-controller-tls" must be provided with the following keys:
#!   ca.crt: <CA certificate>
#!   tls.crt: <TLS certificate>
#!   tls.key: <TLS private key>
#! And the Secret must be mounted to directory "/var/run/antrea/antrea-controller-tls" of the
#! antrea-controller container.
selfSignedCert: true
#! enterpriseAntrea: true

#@ end

#@overlay/match by=overlay.subset({"kind":"ConfigMap","metadata":{"name": "antrea-config-b59fc7d2b4"}})
---
kind: ConfigMap
metadata:
  name: antrea-config-b59fc7d2b4
data:
  antrea-agent.conf: #@ yaml.encode(antrea_agent_conf())
  antrea-controller.conf: #@ yaml.encode(antrea_controller_conf())

#@overlay/match by=overlay.subset({"kind":"Deployment","metadata":{"name": "antrea-controller"}})
---
kind: Deployment
metadata:
  name: antrea-controller
  #@overlay/match missing_ok=True
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: ""
spec:
  template:
    spec:
      containers:
        #@overlay/match by=overlay.subset({"name":"antrea-controller"})
        - image: #@ "{}/{}:{}".format(values.imageInfo.imageRepository, values.imageInfo.images.antreaImage.imagePath, values.imageInfo.images.antreaImage.tag)
          #@overlay/match missing_ok=True
          imagePullPolicy: #@ values.imageInfo.imagePullPolicy


#@overlay/match by=overlay.subset({"kind":"DaemonSet","metadata":{"name": "antrea-agent"}})
---
kind: DaemonSet
metadata:
  #@overlay/match missing_ok=True
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: ""
spec:
  template:
    spec:
      containers:
        #@overlay/match by=overlay.subset({"name":"antrea-agent"})
        - image: #@ "{}/{}:{}".format(values.imageInfo.imageRepository, values.imageInfo.images.antreaImage.imagePath, values.imageInfo.images.antreaImage.tag)
          #@overlay/match missing_ok=True
          imagePullPolicy: #@ values.imageInfo.imagePullPolicy
        #@overlay/match by=overlay.subset({"name":"antrea-ovs"})
        - image: #@ "{}/{}:{}".format(values.imageInfo.imageRepository, values.imageInfo.images.antreaImage.imagePath, values.imageInfo.images.antreaImage.tag)
          #@overlay/match missing_ok=True
          imagePullPolicy: #@ values.imageInfo.imagePullPolicy

        #@ if values.infraProvider == "docker":
        #@overlay/match by=overlay.subset({"name":"antrea-ovs"})
        - command:
          #@overlay/match by=overlay.subset("start_ovs")
          #@overlay/replace
            - start_ovs_netdev

        #@overlay/match by=overlay.subset({"name":"antrea-ovs"})
        - volumeMounts:
          #@overlay/append
            - mountPath: /dev/net/tun
              name: dev-tun
        #@ end

      initContainers:
        #@overlay/match by=overlay.subset({"name":"install-cni"})
        - image: #@ "{}/{}:{}".format(values.imageInfo.imageRepository, values.imageInfo.images.antreaImage.imagePath, values.imageInfo.images.antreaImage.tag)
          #@overlay/match missing_ok=True
          imagePullPolicy: #@ values.imageInfo.imagePullPolicy

        #@ if values.infraProvider == "docker":
        #@overlay/match by=overlay.subset({"name":"install-cni"})
        - command:
          #@overlay/match by=overlay.subset("install_cni")
          #@overlay/replace
            - install_cni_kind
        #@ end
      volumes:
      #@ if values.infraProvider == "docker":
      #@overlay/append
        - hostPath:
            path: /dev/net/tun
            type: CharDevice
          name: dev-tun
      #@ end
