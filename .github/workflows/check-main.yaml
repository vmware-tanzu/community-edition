name: Check - Main (All tests)
on:
  push:
    branches:
      - main
    tags-ignore:
      - "**"

jobs:
  setup-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Start EC2 runner
        id: start-ec2-runner
        shell: bash
        run: |
          INSTANCE_NAME="id-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}"
          echo "INSTANCE_NAME: ${INSTANCE_NAME}"
          echo ::set-output name=ec2-instance-id::${INSTANCE_NAME}
  build-release:
    name: Build Release based on Main
    needs: setup-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.setup-runner.outputs.ec2-instance-id }} # run the job on the newly created runner
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: "1.16"
        id: go
      - name: Check out code
        uses: actions/checkout@v1
      - name: Restore Go Cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run all checks
        shell: bash
        run: |
          make check
      - name: Get dependencies
        shell: bash
        run: |
          make get-deps
      - name: Build
        shell: bash
        run: |
          make ensure-deps
          make release
      - name: Install
        shell: bash
        run: |
          cd `find ./build -type d -name "tce-linux-amd64-*" | xargs -n1 echo -n`
          ALLOW_INSTALL_AS_ROOT=true ./install.sh
  create-cluster:
    name: Create Cluster
    outputs:
      create-cluster-time: ${{ steps.check-create-cluster.outputs.create-cluster-time }}
    needs:
      - setup-runner # required to start the main job when the runner is ready
      - build-release
    runs-on: ${{ needs.setup-runner.outputs.ec2-instance-id }} # run the job on the newly created runner
    steps:
      - name: Create Cluster
        run: CLUSTER_PLAN=dev env time -f "%e" -o create-cluster-time.txt tanzu standalone-cluster create mytest -i docker -v 10
      - name: Check Create Cluster
        id: check-create-cluster
        shell: bash
        run: |
          ./hack/runner/check-setup.sh
          CREATE_TIME=$(cat ./create-cluster-time.txt)
          echo "CREATE_TIME: ${CREATE_TIME}"
          echo ::set-output name=create-cluster-time::${CREATE_TIME}
  report-cluster-create-time:
    name: Report Cluster Creation Time
    needs:
      - setup-runner # required to start the main job when the runner is ready
      - create-cluster
    runs-on: ${{ needs.setup-runner.outputs.ec2-instance-id }} # run the job on the newly created runner
    steps:
      - name: Report cluster create time
        shell: bash
        run: |
          GIT_SHA=$(git rev-parse HEAD)
          TCE_VERSION=$(git describe --tags --abbrev=0)
          echo "tce.pr.standalone-cluster.create-time ${{ needs.create-cluster.outputs.create-cluster-time }} source=<tce.github.${{ github.event.number }}> sha=${GIT_SHA} version=${TCE_VERSION}" | curl \
            --header "Authorization: Bearer ${{ secrets.VMW_WAVEFRONT_API_TOKEN }}" \
            --data @- \
            https://vmware.wavefront.com/report
  delete-cluster:
    name: Delete Cluster
    outputs:
      delete-cluster-time: ${{ steps.check-delete-cluster.outputs.delete-cluster-time }}
    needs:
      - setup-runner # required to start the main job when the runner is ready
      - create-cluster
    runs-on: ${{ needs.setup-runner.outputs.ec2-instance-id }} # run the job on the newly created runner
    steps:
      - name: Delete Cluster
        shell: bash
        run: env time -f "%e" -o delete-cluster-time.txt tanzu standalone-cluster delete mytest --yes -v 10
      - name: Check Delete Cluster
        id: check-delete-cluster
        shell: bash
        run: |
          ./hack/runner/check-teardown.sh
          DELETE_TIME=$(cat ./delete-cluster-time.txt)
          echo "DELETE_TIME: ${DELETE_TIME}"
          echo ::set-output name=delete-cluster-time::${DELETE_TIME}
  report-cluster-delete-time:
    name: Report Cluster Delete Time
    needs:
      - setup-runner # required to start the main job when the runner is ready
      - delete-cluster
    runs-on: ${{ needs.setup-runner.outputs.ec2-instance-id }} # run the job on the newly created runner
    steps:
      - name: Report cluster deletion time
        shell: bash
        run: |
          GIT_SHA=$(git rev-parse HEAD)
          TCE_VERSION=$(git describe --tags --abbrev=0)
          echo "tce.pr.standalone-cluster.delete-time ${{ needs.delete-cluster.outputs.delete-cluster-time }} source=<tce.github.${{ github.event.number }}> sha=${GIT_SHA} version=${TCE_VERSION}" | curl \
            --header "Authorization: Bearer ${{ secrets.VMW_WAVEFRONT_API_TOKEN }}" \
            --data @- \
            https://vmware.wavefront.com/report
  teardown-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - setup-runner # required to get output from the setup-runner job
      - delete-cluster # required to wait when the main job is done
    runs-on: ubuntu-latest
    steps:
      - name: Stop EC2 runner
        id: stop-ec2-runner
        shell: bash
        run: |
          INSTANCE_NAME="id-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}"
          echo "INSTANCE_NAME: ${INSTANCE_NAME}"
