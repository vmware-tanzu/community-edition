name: Release - Create RC, Beta, Alpha

on:
  push:
    branches:
      - "!not_activated_on_branches!*"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-alpha.[0-9]+"

jobs:
  setup-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Start EC2 runner
        id: start-ec2-runner
        shell: bash
        run: |
          INSTANCE_NAME="id-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}"
          echo "INSTANCE_NAME: ${INSTANCE_NAME}"
          echo ::set-output name=ec2-instance-id::${INSTANCE_NAME}
  build-release:
    name: Alpha, Beta, or RC Release
    needs: setup-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.setup-runner.outputs.ec2-instance-id }} # run the job on the newly created runner
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: "1.16"
        id: go
      - name: Config credentials
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_ACCESS_TOKEN }}
        shell: bash
        run: |
          git config --global pull.rebase true
          git config --global url."https://git:$GITHUB_TOKEN@github.com".insteadOf "https://github.com"
      - name: Check out code
        uses: actions/checkout@v1
      - name: Restore Go Cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Get the Tag
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Get dependencies
        shell: bash
        run: |
          make get-deps
      - name: Build
        shell: bash
        run: |
          make ensure-deps
          make release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_ACCESS_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changelog:
            - THIS IS JUST A PLACE HOLDER
            - THIS IS JUST A PLACE HOLDER
          draft: true
          prerelease: true
      - name: Upload Linux AMD64 Asset
        id: upload-linux-amd64-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/tce-linux-amd64-${{ steps.get_version.outputs.VERSION }}.tar.gz
          asset_name: tce-linux-amd64-${{ steps.get_version.outputs.VERSION }}-unsigned.tar.gz
          asset_content_type: application/gzip
      - name: Upload Darwin AMD64 Asset
        id: upload-darwin-amd64-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/tce-darwin-amd64-${{ steps.get_version.outputs.VERSION }}.tar.gz
          asset_name: tce-darwin-amd64-${{ steps.get_version.outputs.VERSION }}-unsigned.tar.gz
          asset_content_type: application/gzip
      - name: Upload Darwin ARM64 Asset
        id: upload-darwin-arm64-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/tce-darwin-arm64-${{ steps.get_version.outputs.VERSION }}.tar.gz
          asset_name: tce-darwin-arm64-${{ steps.get_version.outputs.VERSION }}-unsigned.tar.gz
          asset_content_type: application/gzip
      - name: Upload Windows AMD64 Asset
        id: upload-windows-amd64-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/tce-windows-amd64-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: tce-windows-amd64-${{ steps.get_version.outputs.VERSION }}-unsigned.zip
          asset_content_type: application/zip
      - name: Upload Artifacts to Staging Bucket
        id: upload-artifacts-staging
        uses: google-github-actions/upload-cloud-storage@main
        with:
          path: ./artifacts
          destination: tce-cli-plugins-staging
          credentials: ${{ secrets.GCP_BUCKET_SA }}
      - name: Upload Artifacts to Update Bucket
        id: upload-artifacts-update
        uses: google-github-actions/upload-cloud-storage@main
        with:
          path: ./artifacts
          destination: tce-cli-plugins
          credentials: ${{ secrets.GCP_BUCKET_SA }}
      - name: Commit Next Dev Version
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_ACCESS_TOKEN }}
          ACTUAL_COMMIT_SHA: ${{ github.sha }}
          TCE_CI_BUILD: true
        shell: bash
        run: make cut-release
      - name: Upload TCE Artifacts to Release Bucket
        id: upload-tce-artifacts-release
        uses: google-github-actions/upload-cloud-storage@main
        with:
          path: ./artifacts
          destination: tce-tanzu-cli-plugins
          credentials: ${{ secrets.GCP_BUCKET_SA }}
      - name: Upload TF Artifacts to Release Bucket
        id: upload-tf-artifacts-release
        uses: google-github-actions/upload-cloud-storage@main
        with:
          path: /tmp/tce-release/tanzu-framework/artifacts
          destination: tce-tanzu-cli-framework
          credentials: ${{ secrets.GCP_BUCKET_SA }}
          parent: false
      - name: Upload TF Artifacts-Admin to Release Bucket
        id: upload-tf-artifacts-admin-release
        uses: google-github-actions/upload-cloud-storage@main
        with:
          path: /tmp/tce-release/tanzu-framework/artifacts-admin
          destination: tce-tanzu-cli-framework-admin
          credentials: ${{ secrets.GCP_BUCKET_SA }}
          parent: false
      - name: Upload Cayman Trigger Asset
        id: upload-cayman-trigger-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cayman_trigger.txt
          asset_name: cayman_trigger.txt
          asset_content_type: text/plain
