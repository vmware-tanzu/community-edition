// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AzureRegionalClusterParams azure regional cluster params
//
// swagger:model AzureRegionalClusterParams
type AzureRegionalClusterParams struct {

	// annotations
	Annotations map[string]string `json:"annotations,omitempty"`

	// azure account params
	AzureAccountParams *AzureAccountParams `json:"azureAccountParams,omitempty"`

	// ceip opt in
	CeipOptIn *bool `json:"ceipOptIn,omitempty"`

	// cluster name
	ClusterName string `json:"clusterName,omitempty"`

	// control plane flavor
	ControlPlaneFlavor string `json:"controlPlaneFlavor,omitempty"`

	// control plane machine type
	ControlPlaneMachineType string `json:"controlPlaneMachineType,omitempty"`

	// control plane subnet
	ControlPlaneSubnet string `json:"controlPlaneSubnet,omitempty"`

	// control plane subnet cidr
	ControlPlaneSubnetCidr string `json:"controlPlaneSubnetCidr,omitempty"`

	// enable audit logging
	EnableAuditLogging bool `json:"enableAuditLogging,omitempty"`

	// frontend private Ip
	FrontendPrivateIP string `json:"frontendPrivateIp,omitempty"`

	// identity management
	IdentityManagement *IdentityManagementConfig `json:"identityManagement,omitempty"`

	// is private cluster
	IsPrivateCluster bool `json:"isPrivateCluster,omitempty"`

	// kubernetes version
	KubernetesVersion string `json:"kubernetesVersion,omitempty"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// location
	Location string `json:"location,omitempty"`

	// machine health check enabled
	MachineHealthCheckEnabled bool `json:"machineHealthCheckEnabled,omitempty"`

	// networking
	Networking *TKGNetwork `json:"networking,omitempty"`

	// num of worker nodes
	NumOfWorkerNodes string `json:"numOfWorkerNodes,omitempty"`

	// os
	Os *AzureVirtualMachine `json:"os,omitempty"`

	// resource group
	ResourceGroup string `json:"resourceGroup,omitempty"`

	// ssh public key
	SSHPublicKey string `json:"sshPublicKey,omitempty"`

	// vnet cidr
	VnetCidr string `json:"vnetCidr,omitempty"`

	// vnet name
	VnetName string `json:"vnetName,omitempty"`

	// vnet resource group
	VnetResourceGroup string `json:"vnetResourceGroup,omitempty"`

	// worker machine type
	WorkerMachineType string `json:"workerMachineType,omitempty"`

	// worker node subnet
	WorkerNodeSubnet string `json:"workerNodeSubnet,omitempty"`

	// worker node subnet cidr
	WorkerNodeSubnetCidr string `json:"workerNodeSubnetCidr,omitempty"`
}

// Validate validates this azure regional cluster params
func (m *AzureRegionalClusterParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAzureAccountParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworking(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureRegionalClusterParams) validateAzureAccountParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureAccountParams) { // not required
		return nil
	}

	if m.AzureAccountParams != nil {
		if err := m.AzureAccountParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureAccountParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureAccountParams")
			}
			return err
		}
	}

	return nil
}

func (m *AzureRegionalClusterParams) validateIdentityManagement(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentityManagement) { // not required
		return nil
	}

	if m.IdentityManagement != nil {
		if err := m.IdentityManagement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identityManagement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identityManagement")
			}
			return err
		}
	}

	return nil
}

func (m *AzureRegionalClusterParams) validateNetworking(formats strfmt.Registry) error {
	if swag.IsZero(m.Networking) { // not required
		return nil
	}

	if m.Networking != nil {
		if err := m.Networking.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networking")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networking")
			}
			return err
		}
	}

	return nil
}

func (m *AzureRegionalClusterParams) validateOs(formats strfmt.Registry) error {
	if swag.IsZero(m.Os) { // not required
		return nil
	}

	if m.Os != nil {
		if err := m.Os.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("os")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("os")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this azure regional cluster params based on the context it is used
func (m *AzureRegionalClusterParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAzureAccountParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentityManagement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworking(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureRegionalClusterParams) contextValidateAzureAccountParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureAccountParams != nil {
		if err := m.AzureAccountParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureAccountParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureAccountParams")
			}
			return err
		}
	}

	return nil
}

func (m *AzureRegionalClusterParams) contextValidateIdentityManagement(ctx context.Context, formats strfmt.Registry) error {

	if m.IdentityManagement != nil {
		if err := m.IdentityManagement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identityManagement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identityManagement")
			}
			return err
		}
	}

	return nil
}

func (m *AzureRegionalClusterParams) contextValidateNetworking(ctx context.Context, formats strfmt.Registry) error {

	if m.Networking != nil {
		if err := m.Networking.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networking")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networking")
			}
			return err
		}
	}

	return nil
}

func (m *AzureRegionalClusterParams) contextValidateOs(ctx context.Context, formats strfmt.Registry) error {

	if m.Os != nil {
		if err := m.Os.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("os")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("os")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureRegionalClusterParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureRegionalClusterParams) UnmarshalBinary(b []byte) error {
	var res AzureRegionalClusterParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
