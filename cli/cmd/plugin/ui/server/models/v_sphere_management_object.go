// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VSphereManagementObject v sphere management object
// swagger:model VSphereManagementObject
type VSphereManagementObject struct {

	// moid
	Moid string `json:"moid,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// parent moid
	ParentMoid string `json:"parentMoid,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// resource type
	// Enum: [datacenter cluster hostgroup folder respool vm datastore host network]
	ResourceType string `json:"resourceType,omitempty"`
}

// Validate validates this v sphere management object
func (m *VSphereManagementObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vSphereManagementObjectTypeResourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["datacenter","cluster","hostgroup","folder","respool","vm","datastore","host","network"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vSphereManagementObjectTypeResourceTypePropEnum = append(vSphereManagementObjectTypeResourceTypePropEnum, v)
	}
}

const (

	// VSphereManagementObjectResourceTypeDatacenter captures enum value "datacenter"
	VSphereManagementObjectResourceTypeDatacenter string = "datacenter"

	// VSphereManagementObjectResourceTypeCluster captures enum value "cluster"
	VSphereManagementObjectResourceTypeCluster string = "cluster"

	// VSphereManagementObjectResourceTypeHostgroup captures enum value "hostgroup"
	VSphereManagementObjectResourceTypeHostgroup string = "hostgroup"

	// VSphereManagementObjectResourceTypeFolder captures enum value "folder"
	VSphereManagementObjectResourceTypeFolder string = "folder"

	// VSphereManagementObjectResourceTypeRespool captures enum value "respool"
	VSphereManagementObjectResourceTypeRespool string = "respool"

	// VSphereManagementObjectResourceTypeVM captures enum value "vm"
	VSphereManagementObjectResourceTypeVM string = "vm"

	// VSphereManagementObjectResourceTypeDatastore captures enum value "datastore"
	VSphereManagementObjectResourceTypeDatastore string = "datastore"

	// VSphereManagementObjectResourceTypeHost captures enum value "host"
	VSphereManagementObjectResourceTypeHost string = "host"

	// VSphereManagementObjectResourceTypeNetwork captures enum value "network"
	VSphereManagementObjectResourceTypeNetwork string = "network"
)

// prop value enum
func (m *VSphereManagementObject) validateResourceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vSphereManagementObjectTypeResourceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VSphereManagementObject) validateResourceType(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateResourceTypeEnum("resourceType", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VSphereManagementObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VSphereManagementObject) UnmarshalBinary(b []byte) error {
	var res VSphereManagementObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
