// Code generated by go-swagger; DO NOT EDIT.

package unmanaged

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/vmware-tanzu/community-edition/cli/cmd/plugin/ui/server/models"
)

// CreateUnmanagedClusterOKCode is the HTTP code returned for type CreateUnmanagedClusterOK
const CreateUnmanagedClusterOKCode int = 200

/*CreateUnmanagedClusterOK Create unmanaged cluster started successfully.

swagger:response createUnmanagedClusterOK
*/
type CreateUnmanagedClusterOK struct {

	/*
	  In: Body
	*/
	Payload *models.UnmanagedCluster `json:"body,omitempty"`
}

// NewCreateUnmanagedClusterOK creates CreateUnmanagedClusterOK with default headers values
func NewCreateUnmanagedClusterOK() *CreateUnmanagedClusterOK {

	return &CreateUnmanagedClusterOK{}
}

// WithPayload adds the payload to the create unmanaged cluster o k response
func (o *CreateUnmanagedClusterOK) WithPayload(payload *models.UnmanagedCluster) *CreateUnmanagedClusterOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create unmanaged cluster o k response
func (o *CreateUnmanagedClusterOK) SetPayload(payload *models.UnmanagedCluster) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateUnmanagedClusterOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateUnmanagedClusterBadRequestCode is the HTTP code returned for type CreateUnmanagedClusterBadRequest
const CreateUnmanagedClusterBadRequestCode int = 400

/*CreateUnmanagedClusterBadRequest Bad request

swagger:response createUnmanagedClusterBadRequest
*/
type CreateUnmanagedClusterBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateUnmanagedClusterBadRequest creates CreateUnmanagedClusterBadRequest with default headers values
func NewCreateUnmanagedClusterBadRequest() *CreateUnmanagedClusterBadRequest {

	return &CreateUnmanagedClusterBadRequest{}
}

// WithPayload adds the payload to the create unmanaged cluster bad request response
func (o *CreateUnmanagedClusterBadRequest) WithPayload(payload *models.Error) *CreateUnmanagedClusterBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create unmanaged cluster bad request response
func (o *CreateUnmanagedClusterBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateUnmanagedClusterBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateUnmanagedClusterInternalServerErrorCode is the HTTP code returned for type CreateUnmanagedClusterInternalServerError
const CreateUnmanagedClusterInternalServerErrorCode int = 500

/*CreateUnmanagedClusterInternalServerError Internal server error

swagger:response createUnmanagedClusterInternalServerError
*/
type CreateUnmanagedClusterInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateUnmanagedClusterInternalServerError creates CreateUnmanagedClusterInternalServerError with default headers values
func NewCreateUnmanagedClusterInternalServerError() *CreateUnmanagedClusterInternalServerError {

	return &CreateUnmanagedClusterInternalServerError{}
}

// WithPayload adds the payload to the create unmanaged cluster internal server error response
func (o *CreateUnmanagedClusterInternalServerError) WithPayload(payload *models.Error) *CreateUnmanagedClusterInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create unmanaged cluster internal server error response
func (o *CreateUnmanagedClusterInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateUnmanagedClusterInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
