// Code generated by go-swagger; DO NOT EDIT.

package unmanaged

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/vmware-tanzu/community-edition/cli/cmd/plugin/ui/server/models"
)

// GetUnmanagedClusterOKCode is the HTTP code returned for type GetUnmanagedClusterOK
const GetUnmanagedClusterOKCode int = 200

/*GetUnmanagedClusterOK List of unmanaged clusters.

swagger:response getUnmanagedClusterOK
*/
type GetUnmanagedClusterOK struct {

	/*
	  In: Body
	*/
	Payload *models.UnmanagedCluster `json:"body,omitempty"`
}

// NewGetUnmanagedClusterOK creates GetUnmanagedClusterOK with default headers values
func NewGetUnmanagedClusterOK() *GetUnmanagedClusterOK {

	return &GetUnmanagedClusterOK{}
}

// WithPayload adds the payload to the get unmanaged cluster o k response
func (o *GetUnmanagedClusterOK) WithPayload(payload *models.UnmanagedCluster) *GetUnmanagedClusterOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get unmanaged cluster o k response
func (o *GetUnmanagedClusterOK) SetPayload(payload *models.UnmanagedCluster) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUnmanagedClusterOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUnmanagedClusterBadRequestCode is the HTTP code returned for type GetUnmanagedClusterBadRequest
const GetUnmanagedClusterBadRequestCode int = 400

/*GetUnmanagedClusterBadRequest Bad request

swagger:response getUnmanagedClusterBadRequest
*/
type GetUnmanagedClusterBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUnmanagedClusterBadRequest creates GetUnmanagedClusterBadRequest with default headers values
func NewGetUnmanagedClusterBadRequest() *GetUnmanagedClusterBadRequest {

	return &GetUnmanagedClusterBadRequest{}
}

// WithPayload adds the payload to the get unmanaged cluster bad request response
func (o *GetUnmanagedClusterBadRequest) WithPayload(payload *models.Error) *GetUnmanagedClusterBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get unmanaged cluster bad request response
func (o *GetUnmanagedClusterBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUnmanagedClusterBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUnmanagedClusterInternalServerErrorCode is the HTTP code returned for type GetUnmanagedClusterInternalServerError
const GetUnmanagedClusterInternalServerErrorCode int = 500

/*GetUnmanagedClusterInternalServerError Internal server error

swagger:response getUnmanagedClusterInternalServerError
*/
type GetUnmanagedClusterInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUnmanagedClusterInternalServerError creates GetUnmanagedClusterInternalServerError with default headers values
func NewGetUnmanagedClusterInternalServerError() *GetUnmanagedClusterInternalServerError {

	return &GetUnmanagedClusterInternalServerError{}
}

// WithPayload adds the payload to the get unmanaged cluster internal server error response
func (o *GetUnmanagedClusterInternalServerError) WithPayload(payload *models.Error) *GetUnmanagedClusterInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get unmanaged cluster internal server error response
func (o *GetUnmanagedClusterInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUnmanagedClusterInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
