// Code generated by go-swagger; DO NOT EDIT.

package aws

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAWSSubnetsHandlerFunc turns a function with the right signature into a get a w s subnets handler
type GetAWSSubnetsHandlerFunc func(GetAWSSubnetsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAWSSubnetsHandlerFunc) Handle(params GetAWSSubnetsParams) middleware.Responder {
	return fn(params)
}

// GetAWSSubnetsHandler interface for that can handle valid get a w s subnets params
type GetAWSSubnetsHandler interface {
	Handle(GetAWSSubnetsParams) middleware.Responder
}

// NewGetAWSSubnets creates a new http.Handler for the get a w s subnets operation
func NewGetAWSSubnets(ctx *middleware.Context, handler GetAWSSubnetsHandler) *GetAWSSubnets {
	return &GetAWSSubnets{Context: ctx, Handler: handler}
}

/* GetAWSSubnets swagger:route GET /api/providers/aws/subnets aws getAWSSubnets

Retrieve AWS Subnets info under a VPC

*/
type GetAWSSubnets struct {
	Context *middleware.Context
	Handler GetAWSSubnetsHandler
}

func (o *GetAWSSubnets) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAWSSubnetsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
