// Code generated by go-swagger; DO NOT EDIT.

package aws

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SetAWSEndpointHandlerFunc turns a function with the right signature into a set a w s endpoint handler
type SetAWSEndpointHandlerFunc func(SetAWSEndpointParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SetAWSEndpointHandlerFunc) Handle(params SetAWSEndpointParams) middleware.Responder {
	return fn(params)
}

// SetAWSEndpointHandler interface for that can handle valid set a w s endpoint params
type SetAWSEndpointHandler interface {
	Handle(SetAWSEndpointParams) middleware.Responder
}

// NewSetAWSEndpoint creates a new http.Handler for the set a w s endpoint operation
func NewSetAWSEndpoint(ctx *middleware.Context, handler SetAWSEndpointHandler) *SetAWSEndpoint {
	return &SetAWSEndpoint{Context: ctx, Handler: handler}
}

/*SetAWSEndpoint swagger:route POST /api/provider/aws aws setAWSEndpoint

Validate and set aws credentials

*/
type SetAWSEndpoint struct {
	Context *middleware.Context
	Handler SetAWSEndpointHandler
}

func (o *SetAWSEndpoint) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSetAWSEndpointParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
