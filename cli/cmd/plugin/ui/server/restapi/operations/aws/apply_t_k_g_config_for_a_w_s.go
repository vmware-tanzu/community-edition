// Code generated by go-swagger; DO NOT EDIT.

package aws

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ApplyTKGConfigForAWSHandlerFunc turns a function with the right signature into a apply t k g config for a w s handler
type ApplyTKGConfigForAWSHandlerFunc func(ApplyTKGConfigForAWSParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ApplyTKGConfigForAWSHandlerFunc) Handle(params ApplyTKGConfigForAWSParams) middleware.Responder {
	return fn(params)
}

// ApplyTKGConfigForAWSHandler interface for that can handle valid apply t k g config for a w s params
type ApplyTKGConfigForAWSHandler interface {
	Handle(ApplyTKGConfigForAWSParams) middleware.Responder
}

// NewApplyTKGConfigForAWS creates a new http.Handler for the apply t k g config for a w s operation
func NewApplyTKGConfigForAWS(ctx *middleware.Context, handler ApplyTKGConfigForAWSHandler) *ApplyTKGConfigForAWS {
	return &ApplyTKGConfigForAWS{Context: ctx, Handler: handler}
}

/*ApplyTKGConfigForAWS swagger:route POST /api/provider/aws/tkgconfig aws applyTKGConfigForAWS

Apply the changes to TKG configuration file for AWS"

*/
type ApplyTKGConfigForAWS struct {
	Context *middleware.Context
	Handler ApplyTKGConfigForAWSHandler
}

func (o *ApplyTKGConfigForAWS) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewApplyTKGConfigForAWSParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
