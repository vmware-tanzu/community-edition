// Code generated by go-swagger; DO NOT EDIT.

package aws

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ImportTKGConfigForAWSHandlerFunc turns a function with the right signature into a import t k g config for a w s handler
type ImportTKGConfigForAWSHandlerFunc func(ImportTKGConfigForAWSParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ImportTKGConfigForAWSHandlerFunc) Handle(params ImportTKGConfigForAWSParams) middleware.Responder {
	return fn(params)
}

// ImportTKGConfigForAWSHandler interface for that can handle valid import t k g config for a w s params
type ImportTKGConfigForAWSHandler interface {
	Handle(ImportTKGConfigForAWSParams) middleware.Responder
}

// NewImportTKGConfigForAWS creates a new http.Handler for the import t k g config for a w s operation
func NewImportTKGConfigForAWS(ctx *middleware.Context, handler ImportTKGConfigForAWSHandler) *ImportTKGConfigForAWS {
	return &ImportTKGConfigForAWS{Context: ctx, Handler: handler}
}

/*ImportTKGConfigForAWS swagger:route POST /api/provider/aws/config/import aws importTKGConfigForAWS

Generate TKG configuration object for AWS

*/
type ImportTKGConfigForAWS struct {
	Context *middleware.Context
	Handler ImportTKGConfigForAWSHandler
}

func (o *ImportTKGConfigForAWS) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewImportTKGConfigForAWSParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
