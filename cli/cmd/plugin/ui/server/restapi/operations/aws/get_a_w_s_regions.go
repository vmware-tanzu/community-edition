// Code generated by go-swagger; DO NOT EDIT.

package aws

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAWSRegionsHandlerFunc turns a function with the right signature into a get a w s regions handler
type GetAWSRegionsHandlerFunc func(GetAWSRegionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAWSRegionsHandlerFunc) Handle(params GetAWSRegionsParams) middleware.Responder {
	return fn(params)
}

// GetAWSRegionsHandler interface for that can handle valid get a w s regions params
type GetAWSRegionsHandler interface {
	Handle(GetAWSRegionsParams) middleware.Responder
}

// NewGetAWSRegions creates a new http.Handler for the get a w s regions operation
func NewGetAWSRegions(ctx *middleware.Context, handler GetAWSRegionsHandler) *GetAWSRegions {
	return &GetAWSRegions{Context: ctx, Handler: handler}
}

/* GetAWSRegions swagger:route GET /api/providers/aws/regions aws getAWSRegions

Retrieve AWS regions

*/
type GetAWSRegions struct {
	Context *middleware.Context
	Handler GetAWSRegionsHandler
}

func (o *GetAWSRegions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAWSRegionsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
