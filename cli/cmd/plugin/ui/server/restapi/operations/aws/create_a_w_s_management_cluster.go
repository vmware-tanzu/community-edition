// Code generated by go-swagger; DO NOT EDIT.

package aws

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateAWSManagementClusterHandlerFunc turns a function with the right signature into a create a w s management cluster handler
type CreateAWSManagementClusterHandlerFunc func(CreateAWSManagementClusterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateAWSManagementClusterHandlerFunc) Handle(params CreateAWSManagementClusterParams) middleware.Responder {
	return fn(params)
}

// CreateAWSManagementClusterHandler interface for that can handle valid create a w s management cluster params
type CreateAWSManagementClusterHandler interface {
	Handle(CreateAWSManagementClusterParams) middleware.Responder
}

// NewCreateAWSManagementCluster creates a new http.Handler for the create a w s management cluster operation
func NewCreateAWSManagementCluster(ctx *middleware.Context, handler CreateAWSManagementClusterHandler) *CreateAWSManagementCluster {
	return &CreateAWSManagementCluster{Context: ctx, Handler: handler}
}

/*CreateAWSManagementCluster swagger:route POST /api/provider/aws/create aws createAWSManagementCluster

Create AWS management cluster

*/
type CreateAWSManagementCluster struct {
	Context *middleware.Context
	Handler CreateAWSManagementClusterHandler
}

func (o *CreateAWSManagementCluster) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateAWSManagementClusterParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
