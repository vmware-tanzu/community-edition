// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetWorkloadClustersHandlerFunc turns a function with the right signature into a get workload clusters handler
type GetWorkloadClustersHandlerFunc func(GetWorkloadClustersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWorkloadClustersHandlerFunc) Handle(params GetWorkloadClustersParams) middleware.Responder {
	return fn(params)
}

// GetWorkloadClustersHandler interface for that can handle valid get workload clusters params
type GetWorkloadClustersHandler interface {
	Handle(GetWorkloadClustersParams) middleware.Responder
}

// NewGetWorkloadClusters creates a new http.Handler for the get workload clusters operation
func NewGetWorkloadClusters(ctx *middleware.Context, handler GetWorkloadClustersHandler) *GetWorkloadClusters {
	return &GetWorkloadClusters{Context: ctx, Handler: handler}
}

/*GetWorkloadClusters swagger:route GET /api/management/{managementClusterName}/cluster cluster getWorkloadClusters

Lists all workload clusters managed by a management cluster.

*/
type GetWorkloadClusters struct {
	Context *middleware.Context
	Handler GetWorkloadClustersHandler
}

func (o *GetWorkloadClusters) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetWorkloadClustersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
