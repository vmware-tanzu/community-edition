// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateWorkloadClusterHandlerFunc turns a function with the right signature into a create workload cluster handler
type CreateWorkloadClusterHandlerFunc func(CreateWorkloadClusterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateWorkloadClusterHandlerFunc) Handle(params CreateWorkloadClusterParams) middleware.Responder {
	return fn(params)
}

// CreateWorkloadClusterHandler interface for that can handle valid create workload cluster params
type CreateWorkloadClusterHandler interface {
	Handle(CreateWorkloadClusterParams) middleware.Responder
}

// NewCreateWorkloadCluster creates a new http.Handler for the create workload cluster operation
func NewCreateWorkloadCluster(ctx *middleware.Context, handler CreateWorkloadClusterHandler) *CreateWorkloadCluster {
	return &CreateWorkloadCluster{Context: ctx, Handler: handler}
}

/*CreateWorkloadCluster swagger:route POST /api/management/{managementClusterName}/cluster cluster createWorkloadCluster

Create a new workload clusters managed by a management cluster.

*/
type CreateWorkloadCluster struct {
	Context *middleware.Context
	Handler CreateWorkloadClusterHandler
}

func (o *CreateWorkloadCluster) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateWorkloadClusterParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
