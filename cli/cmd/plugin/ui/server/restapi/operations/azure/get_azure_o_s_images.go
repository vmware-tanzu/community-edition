// Code generated by go-swagger; DO NOT EDIT.

package azure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAzureOSImagesHandlerFunc turns a function with the right signature into a get azure o s images handler
type GetAzureOSImagesHandlerFunc func(GetAzureOSImagesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAzureOSImagesHandlerFunc) Handle(params GetAzureOSImagesParams) middleware.Responder {
	return fn(params)
}

// GetAzureOSImagesHandler interface for that can handle valid get azure o s images params
type GetAzureOSImagesHandler interface {
	Handle(GetAzureOSImagesParams) middleware.Responder
}

// NewGetAzureOSImages creates a new http.Handler for the get azure o s images operation
func NewGetAzureOSImages(ctx *middleware.Context, handler GetAzureOSImagesHandler) *GetAzureOSImages {
	return &GetAzureOSImages{Context: ctx, Handler: handler}
}

/*GetAzureOSImages swagger:route GET /api/provider/azure/osimages azure getAzureOSImages

Retrieve Azure supported os images

*/
type GetAzureOSImages struct {
	Context *middleware.Context
	Handler GetAzureOSImagesHandler
}

func (o *GetAzureOSImages) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAzureOSImagesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
