// Code generated by go-swagger; DO NOT EDIT.

package docker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/vmware-tanzu/community-edition/cli/cmd/plugin/ui/server/models"
)

// CreateDockerRegionalClusterOKCode is the HTTP code returned for type CreateDockerRegionalClusterOK
const CreateDockerRegionalClusterOKCode int = 200

/*CreateDockerRegionalClusterOK Creating regional cluster started successfully

swagger:response createDockerRegionalClusterOK
*/
type CreateDockerRegionalClusterOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateDockerRegionalClusterOK creates CreateDockerRegionalClusterOK with default headers values
func NewCreateDockerRegionalClusterOK() *CreateDockerRegionalClusterOK {

	return &CreateDockerRegionalClusterOK{}
}

// WithPayload adds the payload to the create docker regional cluster o k response
func (o *CreateDockerRegionalClusterOK) WithPayload(payload string) *CreateDockerRegionalClusterOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create docker regional cluster o k response
func (o *CreateDockerRegionalClusterOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateDockerRegionalClusterOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// CreateDockerRegionalClusterBadRequestCode is the HTTP code returned for type CreateDockerRegionalClusterBadRequest
const CreateDockerRegionalClusterBadRequestCode int = 400

/*CreateDockerRegionalClusterBadRequest Bad request

swagger:response createDockerRegionalClusterBadRequest
*/
type CreateDockerRegionalClusterBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateDockerRegionalClusterBadRequest creates CreateDockerRegionalClusterBadRequest with default headers values
func NewCreateDockerRegionalClusterBadRequest() *CreateDockerRegionalClusterBadRequest {

	return &CreateDockerRegionalClusterBadRequest{}
}

// WithPayload adds the payload to the create docker regional cluster bad request response
func (o *CreateDockerRegionalClusterBadRequest) WithPayload(payload *models.Error) *CreateDockerRegionalClusterBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create docker regional cluster bad request response
func (o *CreateDockerRegionalClusterBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateDockerRegionalClusterBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateDockerRegionalClusterInternalServerErrorCode is the HTTP code returned for type CreateDockerRegionalClusterInternalServerError
const CreateDockerRegionalClusterInternalServerErrorCode int = 500

/*CreateDockerRegionalClusterInternalServerError Internal server error

swagger:response createDockerRegionalClusterInternalServerError
*/
type CreateDockerRegionalClusterInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateDockerRegionalClusterInternalServerError creates CreateDockerRegionalClusterInternalServerError with default headers values
func NewCreateDockerRegionalClusterInternalServerError() *CreateDockerRegionalClusterInternalServerError {

	return &CreateDockerRegionalClusterInternalServerError{}
}

// WithPayload adds the payload to the create docker regional cluster internal server error response
func (o *CreateDockerRegionalClusterInternalServerError) WithPayload(payload *models.Error) *CreateDockerRegionalClusterInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create docker regional cluster internal server error response
func (o *CreateDockerRegionalClusterInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateDockerRegionalClusterInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
