// Code generated by go-swagger; DO NOT EDIT.

package management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetClusterClassHandlerFunc turns a function with the right signature into a get cluster class handler
type GetClusterClassHandlerFunc func(GetClusterClassParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetClusterClassHandlerFunc) Handle(params GetClusterClassParams) middleware.Responder {
	return fn(params)
}

// GetClusterClassHandler interface for that can handle valid get cluster class params
type GetClusterClassHandler interface {
	Handle(GetClusterClassParams) middleware.Responder
}

// NewGetClusterClass creates a new http.Handler for the get cluster class operation
func NewGetClusterClass(ctx *middleware.Context, handler GetClusterClassHandler) *GetClusterClass {
	return &GetClusterClass{Context: ctx, Handler: handler}
}

/*GetClusterClass swagger:route GET /api/management/{managementClusterName}/clusterclass/{clusterClassName} management getClusterClass

Retrieve list of cluster classes on given management cluster

*/
type GetClusterClass struct {
	Context *middleware.Context
	Handler GetClusterClassHandler
}

func (o *GetClusterClass) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetClusterClassParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
