// Code generated by go-swagger; DO NOT EDIT.

package management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetClusterClassesHandlerFunc turns a function with the right signature into a get cluster classes handler
type GetClusterClassesHandlerFunc func(GetClusterClassesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetClusterClassesHandlerFunc) Handle(params GetClusterClassesParams) middleware.Responder {
	return fn(params)
}

// GetClusterClassesHandler interface for that can handle valid get cluster classes params
type GetClusterClassesHandler interface {
	Handle(GetClusterClassesParams) middleware.Responder
}

// NewGetClusterClasses creates a new http.Handler for the get cluster classes operation
func NewGetClusterClasses(ctx *middleware.Context, handler GetClusterClassesHandler) *GetClusterClasses {
	return &GetClusterClasses{Context: ctx, Handler: handler}
}

/*GetClusterClasses swagger:route GET /api/management/{managementClusterName}/clusterclass management getClusterClasses

Retrieve list of cluster classes on given management cluster

*/
type GetClusterClasses struct {
	Context *middleware.Context
	Handler GetClusterClassesHandler
}

func (o *GetClusterClasses) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetClusterClassesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
