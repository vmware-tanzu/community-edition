// Code generated by go-swagger; DO NOT EDIT.

package ldap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// VerifyLdapBindHandlerFunc turns a function with the right signature into a verify ldap bind handler
type VerifyLdapBindHandlerFunc func(VerifyLdapBindParams) middleware.Responder

// Handle executing the request and returning a response
func (fn VerifyLdapBindHandlerFunc) Handle(params VerifyLdapBindParams) middleware.Responder {
	return fn(params)
}

// VerifyLdapBindHandler interface for that can handle valid verify ldap bind params
type VerifyLdapBindHandler interface {
	Handle(VerifyLdapBindParams) middleware.Responder
}

// NewVerifyLdapBind creates a new http.Handler for the verify ldap bind operation
func NewVerifyLdapBind(ctx *middleware.Context, handler VerifyLdapBindHandler) *VerifyLdapBind {
	return &VerifyLdapBind{Context: ctx, Handler: handler}
}

/*VerifyLdapBind swagger:route POST /api/ldap/bind ldap verifyLdapBind

Validate LDAP bind or authentication

*/
type VerifyLdapBind struct {
	Context *middleware.Context
	Handler VerifyLdapBindHandler
}

func (o *VerifyLdapBind) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewVerifyLdapBindParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
