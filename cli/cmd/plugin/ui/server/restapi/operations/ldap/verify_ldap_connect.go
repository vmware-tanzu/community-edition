// Code generated by go-swagger; DO NOT EDIT.

package ldap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// VerifyLdapConnectHandlerFunc turns a function with the right signature into a verify ldap connect handler
type VerifyLdapConnectHandlerFunc func(VerifyLdapConnectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn VerifyLdapConnectHandlerFunc) Handle(params VerifyLdapConnectParams) middleware.Responder {
	return fn(params)
}

// VerifyLdapConnectHandler interface for that can handle valid verify ldap connect params
type VerifyLdapConnectHandler interface {
	Handle(VerifyLdapConnectParams) middleware.Responder
}

// NewVerifyLdapConnect creates a new http.Handler for the verify ldap connect operation
func NewVerifyLdapConnect(ctx *middleware.Context, handler VerifyLdapConnectHandler) *VerifyLdapConnect {
	return &VerifyLdapConnect{Context: ctx, Handler: handler}
}

/*VerifyLdapConnect swagger:route POST /api/ldap/connect ldap verifyLdapConnect

Validate LDAP connection

*/
type VerifyLdapConnect struct {
	Context *middleware.Context
	Handler VerifyLdapConnectHandler
}

func (o *VerifyLdapConnect) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewVerifyLdapConnectParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
