// Code generated by go-swagger; DO NOT EDIT.

package vsphere

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetVSphereOSImagesHandlerFunc turns a function with the right signature into a get v sphere o s images handler
type GetVSphereOSImagesHandlerFunc func(GetVSphereOSImagesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetVSphereOSImagesHandlerFunc) Handle(params GetVSphereOSImagesParams) middleware.Responder {
	return fn(params)
}

// GetVSphereOSImagesHandler interface for that can handle valid get v sphere o s images params
type GetVSphereOSImagesHandler interface {
	Handle(GetVSphereOSImagesParams) middleware.Responder
}

// NewGetVSphereOSImages creates a new http.Handler for the get v sphere o s images operation
func NewGetVSphereOSImages(ctx *middleware.Context, handler GetVSphereOSImagesHandler) *GetVSphereOSImages {
	return &GetVSphereOSImages{Context: ctx, Handler: handler}
}

/*GetVSphereOSImages swagger:route GET /api/provider/vsphere/osimages vsphere getVSphereOSImages

Retrieve vSphere supported node os images

*/
type GetVSphereOSImages struct {
	Context *middleware.Context
	Handler GetVSphereOSImagesHandler
}

func (o *GetVSphereOSImages) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetVSphereOSImagesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
