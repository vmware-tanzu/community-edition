// Code generated by go-swagger; DO NOT EDIT.

package vsphere

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/vmware-tanzu/community-edition/cli/cmd/plugin/ui/server/models"
)

// GetVSphereComputeResourcesOKCode is the HTTP code returned for type GetVSphereComputeResourcesOK
const GetVSphereComputeResourcesOKCode int = 200

/*GetVSphereComputeResourcesOK Successful retrieval of vSphere folders

swagger:response getVSphereComputeResourcesOK
*/
type GetVSphereComputeResourcesOK struct {

	/*
	  In: Body
	*/
	Payload []*models.VSphereManagementObject `json:"body,omitempty"`
}

// NewGetVSphereComputeResourcesOK creates GetVSphereComputeResourcesOK with default headers values
func NewGetVSphereComputeResourcesOK() *GetVSphereComputeResourcesOK {

	return &GetVSphereComputeResourcesOK{}
}

// WithPayload adds the payload to the get v sphere compute resources o k response
func (o *GetVSphereComputeResourcesOK) WithPayload(payload []*models.VSphereManagementObject) *GetVSphereComputeResourcesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v sphere compute resources o k response
func (o *GetVSphereComputeResourcesOK) SetPayload(payload []*models.VSphereManagementObject) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVSphereComputeResourcesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.VSphereManagementObject, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetVSphereComputeResourcesBadRequestCode is the HTTP code returned for type GetVSphereComputeResourcesBadRequest
const GetVSphereComputeResourcesBadRequestCode int = 400

/*GetVSphereComputeResourcesBadRequest Bad request

swagger:response getVSphereComputeResourcesBadRequest
*/
type GetVSphereComputeResourcesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetVSphereComputeResourcesBadRequest creates GetVSphereComputeResourcesBadRequest with default headers values
func NewGetVSphereComputeResourcesBadRequest() *GetVSphereComputeResourcesBadRequest {

	return &GetVSphereComputeResourcesBadRequest{}
}

// WithPayload adds the payload to the get v sphere compute resources bad request response
func (o *GetVSphereComputeResourcesBadRequest) WithPayload(payload *models.Error) *GetVSphereComputeResourcesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v sphere compute resources bad request response
func (o *GetVSphereComputeResourcesBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVSphereComputeResourcesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetVSphereComputeResourcesUnauthorizedCode is the HTTP code returned for type GetVSphereComputeResourcesUnauthorized
const GetVSphereComputeResourcesUnauthorizedCode int = 401

/*GetVSphereComputeResourcesUnauthorized Incorrect credentials

swagger:response getVSphereComputeResourcesUnauthorized
*/
type GetVSphereComputeResourcesUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetVSphereComputeResourcesUnauthorized creates GetVSphereComputeResourcesUnauthorized with default headers values
func NewGetVSphereComputeResourcesUnauthorized() *GetVSphereComputeResourcesUnauthorized {

	return &GetVSphereComputeResourcesUnauthorized{}
}

// WithPayload adds the payload to the get v sphere compute resources unauthorized response
func (o *GetVSphereComputeResourcesUnauthorized) WithPayload(payload *models.Error) *GetVSphereComputeResourcesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v sphere compute resources unauthorized response
func (o *GetVSphereComputeResourcesUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVSphereComputeResourcesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetVSphereComputeResourcesInternalServerErrorCode is the HTTP code returned for type GetVSphereComputeResourcesInternalServerError
const GetVSphereComputeResourcesInternalServerErrorCode int = 500

/*GetVSphereComputeResourcesInternalServerError Internal server error

swagger:response getVSphereComputeResourcesInternalServerError
*/
type GetVSphereComputeResourcesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetVSphereComputeResourcesInternalServerError creates GetVSphereComputeResourcesInternalServerError with default headers values
func NewGetVSphereComputeResourcesInternalServerError() *GetVSphereComputeResourcesInternalServerError {

	return &GetVSphereComputeResourcesInternalServerError{}
}

// WithPayload adds the payload to the get v sphere compute resources internal server error response
func (o *GetVSphereComputeResourcesInternalServerError) WithPayload(payload *models.Error) *GetVSphereComputeResourcesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v sphere compute resources internal server error response
func (o *GetVSphereComputeResourcesInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVSphereComputeResourcesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
