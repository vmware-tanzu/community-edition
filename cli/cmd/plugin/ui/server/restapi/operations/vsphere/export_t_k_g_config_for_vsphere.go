// Code generated by go-swagger; DO NOT EDIT.

package vsphere

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ExportTKGConfigForVsphereHandlerFunc turns a function with the right signature into a export t k g config for vsphere handler
type ExportTKGConfigForVsphereHandlerFunc func(ExportTKGConfigForVsphereParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ExportTKGConfigForVsphereHandlerFunc) Handle(params ExportTKGConfigForVsphereParams) middleware.Responder {
	return fn(params)
}

// ExportTKGConfigForVsphereHandler interface for that can handle valid export t k g config for vsphere params
type ExportTKGConfigForVsphereHandler interface {
	Handle(ExportTKGConfigForVsphereParams) middleware.Responder
}

// NewExportTKGConfigForVsphere creates a new http.Handler for the export t k g config for vsphere operation
func NewExportTKGConfigForVsphere(ctx *middleware.Context, handler ExportTKGConfigForVsphereHandler) *ExportTKGConfigForVsphere {
	return &ExportTKGConfigForVsphere{Context: ctx, Handler: handler}
}

/*ExportTKGConfigForVsphere swagger:route POST /api/provider/vsphere/config/export vsphere exportTKGConfigForVsphere

Generate TKG configuration file for vSphere

*/
type ExportTKGConfigForVsphere struct {
	Context *middleware.Context
	Handler ExportTKGConfigForVsphereHandler
}

func (o *ExportTKGConfigForVsphere) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewExportTKGConfigForVsphereParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
