// Code generated by go-swagger; DO NOT EDIT.

package vsphere

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateVSphereManagementClusterHandlerFunc turns a function with the right signature into a create v sphere management cluster handler
type CreateVSphereManagementClusterHandlerFunc func(CreateVSphereManagementClusterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateVSphereManagementClusterHandlerFunc) Handle(params CreateVSphereManagementClusterParams) middleware.Responder {
	return fn(params)
}

// CreateVSphereManagementClusterHandler interface for that can handle valid create v sphere management cluster params
type CreateVSphereManagementClusterHandler interface {
	Handle(CreateVSphereManagementClusterParams) middleware.Responder
}

// NewCreateVSphereManagementCluster creates a new http.Handler for the create v sphere management cluster operation
func NewCreateVSphereManagementCluster(ctx *middleware.Context, handler CreateVSphereManagementClusterHandler) *CreateVSphereManagementCluster {
	return &CreateVSphereManagementCluster{Context: ctx, Handler: handler}
}

/*CreateVSphereManagementCluster swagger:route POST /api/provider/vsphere/create vsphere createVSphereManagementCluster

Create vSphere management cluster

*/
type CreateVSphereManagementCluster struct {
	Context *middleware.Context
	Handler CreateVSphereManagementClusterHandler
}

func (o *CreateVSphereManagementCluster) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateVSphereManagementClusterParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
