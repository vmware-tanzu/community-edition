// Code generated by go-swagger; DO NOT EDIT.

package vsphere

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ImportTKGConfigForVsphereHandlerFunc turns a function with the right signature into a import t k g config for vsphere handler
type ImportTKGConfigForVsphereHandlerFunc func(ImportTKGConfigForVsphereParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ImportTKGConfigForVsphereHandlerFunc) Handle(params ImportTKGConfigForVsphereParams) middleware.Responder {
	return fn(params)
}

// ImportTKGConfigForVsphereHandler interface for that can handle valid import t k g config for vsphere params
type ImportTKGConfigForVsphereHandler interface {
	Handle(ImportTKGConfigForVsphereParams) middleware.Responder
}

// NewImportTKGConfigForVsphere creates a new http.Handler for the import t k g config for vsphere operation
func NewImportTKGConfigForVsphere(ctx *middleware.Context, handler ImportTKGConfigForVsphereHandler) *ImportTKGConfigForVsphere {
	return &ImportTKGConfigForVsphere{Context: ctx, Handler: handler}
}

/*ImportTKGConfigForVsphere swagger:route POST /api/provider/vsphere/config/import vsphere importTKGConfigForVsphere

Generate TKG configuration object for vSphere

*/
type ImportTKGConfigForVsphere struct {
	Context *middleware.Context
	Handler ImportTKGConfigForVsphereHandler
}

func (o *ImportTKGConfigForVsphere) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewImportTKGConfigForVsphereParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
