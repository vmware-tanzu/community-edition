// Code generated by go-swagger; DO NOT EDIT.

package vsphere

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware-tanzu/community-edition/cli/cmd/plugin/ui/server/models"
)

// ImportTKGConfigForVsphereOKCode is the HTTP code returned for type ImportTKGConfigForVsphereOK
const ImportTKGConfigForVsphereOKCode int = 200

/*ImportTKGConfigForVsphereOK Generated TKG configuration successfully

swagger:response importTKGConfigForVsphereOK
*/
type ImportTKGConfigForVsphereOK struct {

	/*
	  In: Body
	*/
	Payload *models.VsphereRegionalClusterParams `json:"body,omitempty"`
}

// NewImportTKGConfigForVsphereOK creates ImportTKGConfigForVsphereOK with default headers values
func NewImportTKGConfigForVsphereOK() *ImportTKGConfigForVsphereOK {

	return &ImportTKGConfigForVsphereOK{}
}

// WithPayload adds the payload to the import t k g config for vsphere o k response
func (o *ImportTKGConfigForVsphereOK) WithPayload(payload *models.VsphereRegionalClusterParams) *ImportTKGConfigForVsphereOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import t k g config for vsphere o k response
func (o *ImportTKGConfigForVsphereOK) SetPayload(payload *models.VsphereRegionalClusterParams) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportTKGConfigForVsphereOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ImportTKGConfigForVsphereBadRequestCode is the HTTP code returned for type ImportTKGConfigForVsphereBadRequest
const ImportTKGConfigForVsphereBadRequestCode int = 400

/*ImportTKGConfigForVsphereBadRequest Bad request

swagger:response importTKGConfigForVsphereBadRequest
*/
type ImportTKGConfigForVsphereBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewImportTKGConfigForVsphereBadRequest creates ImportTKGConfigForVsphereBadRequest with default headers values
func NewImportTKGConfigForVsphereBadRequest() *ImportTKGConfigForVsphereBadRequest {

	return &ImportTKGConfigForVsphereBadRequest{}
}

// WithPayload adds the payload to the import t k g config for vsphere bad request response
func (o *ImportTKGConfigForVsphereBadRequest) WithPayload(payload *models.Error) *ImportTKGConfigForVsphereBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import t k g config for vsphere bad request response
func (o *ImportTKGConfigForVsphereBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportTKGConfigForVsphereBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ImportTKGConfigForVsphereUnauthorizedCode is the HTTP code returned for type ImportTKGConfigForVsphereUnauthorized
const ImportTKGConfigForVsphereUnauthorizedCode int = 401

/*ImportTKGConfigForVsphereUnauthorized Incorrect credentials

swagger:response importTKGConfigForVsphereUnauthorized
*/
type ImportTKGConfigForVsphereUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewImportTKGConfigForVsphereUnauthorized creates ImportTKGConfigForVsphereUnauthorized with default headers values
func NewImportTKGConfigForVsphereUnauthorized() *ImportTKGConfigForVsphereUnauthorized {

	return &ImportTKGConfigForVsphereUnauthorized{}
}

// WithPayload adds the payload to the import t k g config for vsphere unauthorized response
func (o *ImportTKGConfigForVsphereUnauthorized) WithPayload(payload *models.Error) *ImportTKGConfigForVsphereUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import t k g config for vsphere unauthorized response
func (o *ImportTKGConfigForVsphereUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportTKGConfigForVsphereUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ImportTKGConfigForVsphereInternalServerErrorCode is the HTTP code returned for type ImportTKGConfigForVsphereInternalServerError
const ImportTKGConfigForVsphereInternalServerErrorCode int = 500

/*ImportTKGConfigForVsphereInternalServerError Internal server error

swagger:response importTKGConfigForVsphereInternalServerError
*/
type ImportTKGConfigForVsphereInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewImportTKGConfigForVsphereInternalServerError creates ImportTKGConfigForVsphereInternalServerError with default headers values
func NewImportTKGConfigForVsphereInternalServerError() *ImportTKGConfigForVsphereInternalServerError {

	return &ImportTKGConfigForVsphereInternalServerError{}
}

// WithPayload adds the payload to the import t k g config for vsphere internal server error response
func (o *ImportTKGConfigForVsphereInternalServerError) WithPayload(payload *models.Error) *ImportTKGConfigForVsphereInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import t k g config for vsphere internal server error response
func (o *ImportTKGConfigForVsphereInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportTKGConfigForVsphereInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
